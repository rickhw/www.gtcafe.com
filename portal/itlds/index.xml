<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GTCafe Studio – 唉梯喇滴賽</title>
    <link>https://www.gtcafe.com/portal/itlds/</link>
    <description>Recent content in 唉梯喇滴賽 on GTCafe Studio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Tue, 28 Feb 2023 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="https://www.gtcafe.com/portal/itlds/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Itlds: 掌握人生「局」的三種層次</title>
      <link>https://www.gtcafe.com/portal/itlds/2023/0227_layers-in-life/</link>
      <pubDate>Tue, 28 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2023/0227_layers-in-life/</guid>
      <description>
        
        
        &lt;p&gt;掌握人生「局」的三種層次：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;嘗試了解這個世界是怎麼運作的&lt;/li&gt;
&lt;li&gt;認清無法改變的外在因素/環境&lt;/li&gt;
&lt;li&gt;讓自己具備可以面對改變的能力&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;1-嘗試了解這個世界是怎麼運作的&#34;&gt;1. 嘗試了解這個世界是怎麼運作的&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;這個世界&lt;/code&gt; 泛指 政府, 社會, 政治, 天氣, 企業/公司, 經濟, 市場, 房價, 通貨膨脹, 人體, 網際網路, 一台電腦, 作業系統, 人工智能,  &amp;hellip;. etc&lt;/p&gt;
&lt;p&gt;這些是大部分普通人 (99.999%) 不容易理解的, 或者不願意理解, 一輩子無法掌握的.&lt;/p&gt;
&lt;p&gt;大部分的人, 搞不清楚一個企業是怎麼運做的, 你的薪水是怎麼來的, 不清楚網路是怎麼連起來的, 臉書怎麼推送資訊給你的, 每天在用的手機是怎麼運作的, 世界局勢每天的變化與運作, 政府機構是怎麼運作的, 股市的漲跌是怎麼回事 &amp;hellip;.. etc&lt;/p&gt;
&lt;p&gt;但是, 雖然不太容易理解, &lt;code&gt;持續的&lt;/code&gt; 嘗試學習與理解 &amp;hellip; 每天都學一點點, 消化一些些, 定期去組織它, 輪廓會漸漸清晰, 這樣的複利學習, 讓人一年有機會成長 37 倍, 更容易了解世界的 &lt;code&gt;全貌&lt;/code&gt;, 這世界是怎麼運作的, 進而助於 &lt;code&gt;取捨&lt;/code&gt; 與 &lt;code&gt;放下&lt;/code&gt; ..&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2-認清無法改變的外在因素環境&#34;&gt;2. 認清無法改變的外在因素/環境&lt;/h2&gt;
&lt;p&gt;基於 1) 的定義的 &amp;ldquo;&lt;code&gt;世界&lt;/code&gt;&amp;rdquo;, 因為大部分 (99.999%) 的人, 無法 &lt;code&gt;理解&lt;/code&gt; 或 &lt;code&gt;掌握&lt;/code&gt; 他們的運作原理, 造成對於這些世界產生 &lt;a href=&#34;https://zh.wikipedia.org/zh-tw/VUCA&#34;&gt;霧卡 (VUCA)&lt;/a&gt; 的現象:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;VUCA:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Volatility: 易變性&lt;/li&gt;
&lt;li&gt;Uncertainty: 不確定性&lt;/li&gt;
&lt;li&gt;Complexity: 複雜性&lt;/li&gt;
&lt;li&gt;Ambiguity: 模糊性&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;像是, 為啥突然買不到雞蛋？為啥星宇航空股價突然漲了兩倍？ChatGPT 為啥突然紅的莫名其妙？天氣為啥突然那麼冷？電腦為啥突然壞了？ &amp;hellip; etc&lt;/p&gt;
&lt;p&gt;經過學習後, 盡可能了解股票的運作, 盡可能了解企業是怎麼運作的, 企業主管用人的邏輯, 世界經濟的流動脈絡, 政府運作的背景, 了解天氣大概怎麼一回事 &amp;hellip; etc&lt;/p&gt;
&lt;p&gt;看清楚哪些自己無法改變的, 認清事實, 像是一個人改變不了世界格局與趨勢的, 一個應用程式軟體工程師改不了解作業系統的運作模式, 普通人影響不了經濟趨勢從股票獲利, 大家都改變不了 ChatGPT 接下來會影響哪些職業, 無法改變電腦會壞掉 / 手機會壞掉, 無法改變人生的長度, &amp;hellip; 等&lt;/p&gt;
&lt;p&gt;太多無法改變的事情, 但我們都可以不斷提升自己的知識, 增加自己的 &lt;code&gt;餘裕&lt;/code&gt;, 當外在環境改變時, 讓自己具備面對改變的能力&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;3-讓自己具備可以面對改變的能力&#34;&gt;3. 讓自己具備可以面對改變的能力&lt;/h2&gt;
&lt;p&gt;面對外在改變是應該, &lt;code&gt;心隨境轉&lt;/code&gt; or &lt;code&gt;境隨心轉&lt;/code&gt;？還是 &lt;code&gt;心如止水&lt;/code&gt;, &lt;code&gt;不動如山嶽&lt;/code&gt;？ 還是 &lt;code&gt;隨波逐流&lt;/code&gt;, &lt;code&gt;怡然自得&lt;/code&gt;？&lt;/p&gt;
&lt;p&gt;其實大部分的人根本無法意會到這個層次, 因為很少人能夠 &lt;code&gt;認知 (Awareness)&lt;/code&gt; 前面 (1), (2) 的 &lt;code&gt;局&lt;/code&gt;, 大多人只能被淹沒在資訊洪流中, 被別人利用 &lt;code&gt;資訊落差&lt;/code&gt; (像是股票 / 房價 / 經濟 / 政治), 被迫作出無謂的選擇, 或者直接被選擇 (沒機會選擇 / 或者不知道已經被選擇), 然後過完一生而不自知.&lt;/p&gt;
&lt;p&gt;當了解 (1), (2) 整個 &lt;code&gt;局&lt;/code&gt; 的概念, 要處理的, 不是外在環境的變因 / 無法改變的 / 無法控制的, 而是自己的取捨.&lt;/p&gt;
&lt;p&gt;也就是, 那些不是自己能力所及 / 改變不了的, 那些是要持續努力的 / 有機會改變的, 進而產生自己的 &lt;code&gt;飛輪效應&lt;/code&gt;, 拋棄不必要的外在束縛, 包含不必要的 &lt;code&gt;社會觀感&lt;/code&gt; / 不合理的 &lt;code&gt;價值觀&lt;/code&gt;, 以及沒有意義的 &lt;code&gt;人際關係&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;投入讓自己有 &lt;code&gt;更多選擇&lt;/code&gt; 的機會, 當機會來到時, 要思考的是, 如何 &lt;code&gt;選擇&lt;/code&gt; / &lt;code&gt;取捨&lt;/code&gt; / &lt;code&gt;策略&lt;/code&gt;, 拿回自己人生的 &lt;code&gt;主控權&lt;/code&gt; /  &lt;code&gt;決定權&lt;/code&gt; / &lt;code&gt;選擇權&lt;/code&gt;, &lt;code&gt;主導&lt;/code&gt; 自己的人生.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://readingoutpost.com/antifragile/&#34;&gt;反脆弱&lt;/a&gt; 是每個人都要具備的, 因為 (1) &lt;code&gt;外在環境&lt;/code&gt; / 世界一直都在變化, (2) 一般人也改變不了, 唯一能做的是, 讓自己有 &lt;code&gt;餘裕&lt;/code&gt;, 從容的 &lt;code&gt;面對變化&lt;/code&gt;, 餘裕的面相很多, 包含 &lt;code&gt;時間&lt;/code&gt; / &lt;code&gt;知識&lt;/code&gt; / &lt;code&gt;經濟&lt;/code&gt; / &lt;code&gt;健康&lt;/code&gt; / &lt;code&gt;人脈&lt;/code&gt; / &lt;code&gt;歷練&lt;/code&gt;, &amp;hellip; 等, 特別重要的是 &lt;code&gt;時間&lt;/code&gt; 的餘裕.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Your time is limited, so don&amp;rsquo;t waste it living someone else&amp;rsquo;s life. Don&amp;rsquo;t be trapped by dogma - which is living with the results of other people&amp;rsquo;s thinking. Don&amp;rsquo;t let the noise of other&amp;rsquo;s opinions drown out your own inner voice. And most important, have the courage to follow your heart and intuition. They somehow already know what you truly want to become. Everything else is secondary&lt;/p&gt;
&lt;p&gt;— Steve Jobs&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;參考資料&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/zh-tw/VUCA&#34;&gt;霧卡 (VUCA)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://readingoutpost.com/antifragile/&#34;&gt;反脆弱&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;原始資料&#34;&gt;原始資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;發表時間：2023/02/27&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/pfbid02ZKNjn6KsRW9BQLpxXLrcrAobTFa2BQybArbCFtrERSH7zNVve56QyorfQJY85LCJl&#34;&gt;原文連結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 閱讀習慣的由來</title>
      <link>https://www.gtcafe.com/portal/itlds/2023/0223_reading/</link>
      <pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2023/0223_reading/</guid>
      <description>
        
        
        &lt;p&gt;小時候很喜歡聽 #有聲書 或 #廣播
(現在還是，只是換成 podcast)
特別是醫生作家 #侯文詠 的著作
聽了早期的有聲書 #在生命轉彎的地方
喜歡他對於人生、教育體制的想法
算是直接影響我人生選擇的書&lt;/p&gt;
&lt;p&gt;有聲書中
他常提到他很喜歡讀小說
說讀故事的過程很有趣
所以我也因此開始嘗試閱讀小說
想了養成讓生活有趣的習慣&lt;/p&gt;
&lt;p&gt;會開始接觸 #金庸小說
應該是 #楊佩佩 拍的電視劇：#倚天屠龍記
從那之後 才知道金庸是武俠小說大師
所以自己跑去買了 #神雕俠侶
四本的長篇小說
想體驗侯文詠說的讀小說有趣
到底是多有趣&lt;/p&gt;
&lt;p&gt;沒想到一開始就挑個很長篇的
加上閱讀能力 理解力也不太好
那個過程真的是痛苦XD&lt;/p&gt;
&lt;p&gt;痛苦除了閱讀能力不好
另外是神雕俠侶的故事太悶苦了
怎麼會有人這麼慘 又這麼雖小的
但還是硬著頭皮讀完了
所以一開始對金庸小說映像不好
心裡甚至會討厭金庸
為啥要把故事寫成這樣 XDD&lt;/p&gt;
&lt;p&gt;不過人就是這樣
一邊看 一邊罵
然後還是買了下一部：#倚天屠龍記
就是真的越讀越有趣了
當兵的時候，把所有長篇，包含
#射雕英雄傳、#天龍八部、#鹿鼎記、#笑傲江湖 … 等
主要長篇蒐集到，
利用當兵的空閒時間
也全數看完&lt;/p&gt;
&lt;p&gt;後來到台北工作之後
金庸把當時的版本做了一次更版
出了新世紀版 (金色封面的
也是大家常說的第三版
那時候就衝了一套&lt;/p&gt;
&lt;p&gt;然後工作的日子
每天睡前不是翻閱樂器手冊
就是讀金庸小說
常常是越讀越有精神
越讀越入戲
然後就讀到凌晨三四點
隔天還要上班 XDD&lt;/p&gt;
&lt;p&gt;後來重讀次數變多了
讀的量也變多了
也漸漸知道金庸哪部小說好
那部不好
那部其實架構是在模仿西洋經典文學小說
哪部其實是在寫舞台劇劇本
漸漸的更深刻的了解武、俠的深刻意涵&lt;/p&gt;
&lt;p&gt;不過習慣金庸的文筆之後
看其他的小說會不太習慣
大概就是玩了 &lt;code&gt;薩爾達傳說&lt;/code&gt; &lt;code&gt;曠野之息&lt;/code&gt; 後
對其他遊戲都會覺得無趣&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;突然想到
記錄一下 ..&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;原始資料&#34;&gt;原始資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;發表時間：2023/02/23&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/pfbid02882zUCDauhdvcvKMkUm4APiHjBrs95XgkuEiJRLCV9izKuA4jR66eDVpZhp3m6X9l&#34;&gt;原文連結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 聊聊需求分析、系統分析、系統設計</title>
      <link>https://www.gtcafe.com/portal/itlds/2023/0207_system-analysis/</link>
      <pubDate>Tue, 07 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2023/0207_system-analysis/</guid>
      <description>
        
        
        &lt;p&gt;跟朋友聊到 軟體設計與開發的流程
log 一些口述的東西&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;原則：&lt;/p&gt;
&lt;p&gt;規格只要有 60 分就可以開工了
細節是討論出來的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;規格是 requirement &amp;amp; system analysis, system design 的產出&lt;/p&gt;
&lt;p&gt;需求分析會展開:
0. 依照 需求訪談, 分析需求的種類, 目的, 預期結論&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用者定義: 哪些角色 (role)&lt;/li&gt;
&lt;li&gt;故事定義: 情境, 故事&lt;/li&gt;
&lt;li&gt;使用者故事定義: role x story, 我稱為 #使用者故事矩陣&lt;/li&gt;
&lt;li&gt;確立目標: 各個時間點的 DAU, 三個月 1k, 半年 100k &amp;hellip; 用以評估架構&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;系統分析:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;依照需求分析結論, 長出系統架構的選項, 至少要有三個&lt;/li&gt;
&lt;li&gt;找出 三種架構各自的 Pros &amp;amp; Cons&lt;/li&gt;
&lt;li&gt;決策與取捨&lt;/li&gt;
&lt;li&gt;用 psuedo code 溝通&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;系統設計:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;產出可以給工程師開發的參照, 最理想的例子是 RFC&lt;/li&gt;
&lt;li&gt;依照 #使用者故事矩陣 展開各種 #內外介面, ex: API / Config / Protocol&lt;/li&gt;
&lt;li&gt;依照 #使用者故事矩陣 展開 sequence diagram&lt;/li&gt;
&lt;li&gt;到 2) 就可以開始 PoC 了, 準備跟 TA / Stakeholder Demo&lt;/li&gt;
&lt;li&gt;系統設計最後生出來的東西稱為 #規格 (Spec)&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;案例：&lt;/p&gt;
&lt;p&gt;之前設計底層的技術規格 (類似 RFC)
系統分析與設計大概 30% 的時候
就會寫 Pseudo code
重點是讓真的開發的工程師快速理解抽象概念
(分析與設計是同步進行的)&lt;/p&gt;
&lt;p&gt;規格大概 60%，大方向確立
就會讓工程師開始 PoC
然後核心的 User Stories 為主
跟 TA / Stakeholder Demo&lt;/p&gt;
&lt;p&gt;沒啥問題後
才開始寫規格的細節
工程師實作過程
也會跟我討論細節
例如有一些砸揍演算法應該用哪一個？
這種東西如果不是核心的規格
就會直接讓工程師去發揮&lt;/p&gt;
&lt;p&gt;最後整個規格差不多 80%
實作也都完成核心的 User Stories
基本上已經上線了&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;原始資料&#34;&gt;原始資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;發表時間：2023/02/07&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/pfbid0a6hTgBoQHo5Zu5jXGSQZJijiQ3MdM12eXVNP4bfGQM7ArCEdDUFDdvYSSqz1ZoW7l&#34;&gt;原文連結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 需求分析 - 生活中的案例</title>
      <link>https://www.gtcafe.com/portal/itlds/2023/0207_system-analysis-in-life/</link>
      <pubDate>Tue, 07 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2023/0207_system-analysis-in-life/</guid>
      <description>
        
        
        &lt;p&gt;繼續上一篇 [1] 軟體設計與開發流程，
提到的需求分析
紀錄這個比較生活中的案例
也是跟朋友會聊到的&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;需求分析案例&lt;/p&gt;
&lt;p&gt;需求是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要去日本旅行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;沒了&lt;/p&gt;
&lt;p&gt;Google 老闆的需求：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我也要一個 ChatGPT ..&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大概就這樣。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;需求分析做什麼？
至少問你的 Stakeholder 這些問題，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;這個需求的 #使用者 有誰？&lt;/li&gt;
&lt;li&gt;有哪些 #故事&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用者可能會有你, 家人, 女友/男友,
老婆/先生, 老媽/老爸, 隔壁的王杯杯?&lt;/p&gt;
&lt;p&gt;故事有幾個角度：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;是去日本，但是去哪？可能有北海道、東京、關西、沖繩 ..&lt;/li&gt;
&lt;li&gt;怎麼去？坐飛機？坐船？划水？做太空船？&lt;/li&gt;
&lt;li&gt;酒店住啥？五星級？民宿？還是露宿街頭？&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;把 User x Story 就形成 #使用者故事矩陣
例如，分析出來的 User 一共有 5 種 (Role)
Story 有 10 個，
邏輯上的 User Story 排列組合就有 5 x 10 = 50 個
但 這 50 個有很明顯有很多不合邏輯的&lt;/p&gt;
&lt;p&gt;例如，使用者應該會一起，不會分開
不會出現你坐飛機，你爸做船過去日本
更不會出現，你去北海道，你老婆去沖繩的 ..&lt;/p&gt;
&lt;p&gt;User Story 是否合理，
由 PO vs Stakeholder 討論出來&lt;/p&gt;
&lt;p&gt;這個矩陣會呈現所有的排列組合
合理與不合理
找出最重要的三個 (Happy Paths)。
剩下的，未來遇到再做就好。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;找出 #使用者矩陣最核心的故事，假設有以下三個：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;去北海道, 住民宿, 做華航&lt;/li&gt;
&lt;li&gt;去東京, 住五星級, 做船&lt;/li&gt;
&lt;li&gt;去沖繩, 露宿街頭, 滑水&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有了這三個，那大家就來專注討論系統分析吧。。。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;需求分析的重點，就是搞清楚 User 有哪些人？
Story 有哪些，這些交成出來故事的合理性？以及重要性&lt;/p&gt;
&lt;p&gt;需求分析不重要？&lt;/p&gt;
&lt;p&gt;分析得好不好，看 User / Story 定義的大概會有個譜
有可以知道範圍大小&lt;/p&gt;
&lt;p&gt;—
「User 常常搞不清楚」在中文語意上常常是被忽略的
也就 #主詞 中文語意的盲點
所以只要用中文在溝通需求
很容易就會忘記 “User” 到底是誰
是什麼角色 (Role)&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;原始資料&#34;&gt;原始資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;發表時間：2023/02/07&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/pfbid02mVCZQhYBdoNgjLqnw9dTDUFbfE2nwvB7XQ2GCJ4KXMzd7JECp21RcgG5w4832VZLl&#34;&gt;原文連結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 成熟的人</title>
      <link>https://www.gtcafe.com/portal/itlds/2023/0205_how-the-world-works/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2023/0205_how-the-world-works/</guid>
      <description>
        
        
        &lt;p&gt;成熟的人：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;明白這世界是怎麼運作，而且可以跟上運作的節奏&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同樣的概念&lt;/p&gt;
&lt;p&gt;成熟的軟體工程師
了解作業系統怎麼運作&lt;/p&gt;
&lt;p&gt;做投資操作
了解市場的運作機制&lt;/p&gt;
&lt;p&gt;買賣房地產
了解房地產的運作規則&lt;/p&gt;
&lt;p&gt;愛情市場
了解男女婚姻市場運作的規則&lt;/p&gt;
&lt;p&gt;現實的狀況是
大部分的人在了解世界 (社會) 怎麼運作作之前
就要進入世界 (社會) 生存 ..&lt;/p&gt;
&lt;p&gt;大部分的人都已經具備成年人的條件
也就是生理上成熟
但是大部分的人跟不上這個世界的運作
足以成為一個成熟的人&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;原始資料&#34;&gt;原始資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;發表時間：2023/02/05&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/pfbid0sTBM3D5TysYj4S4fjzMsSbNmdTWZALgqrYez27CaB6uenLcjMBJSAp9DD14kJNuml&#34;&gt;原文連結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 複利人生</title>
      <link>https://www.gtcafe.com/portal/itlds/2023/0205_compound-interest/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2023/0205_compound-interest/</guid>
      <description>
        
        
        &lt;p&gt;今天跟朋友聊到的想法，
最近我在做的事情 / 取捨
背後的動機 …&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;#複利寫作
讓自己的人生走的每一步
都有機會在接下來的生命
反覆使用、形成價值
也就是複利效應&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;寫作是其中一種方法
不管怎樣先寫下來
記錄下來
留下來&lt;/p&gt;
&lt;p&gt;寫程式不用馬上重構
一個功能寫一千行沒關係
先寫出來再說
不管用的方法多蠢
先求有&lt;/p&gt;
&lt;p&gt;有東西之後
就可以進入第二個&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;#遞迴式的迭代循環&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;寫完程式
最後很重要的是
開始重構那一千行
讓整個程式結構更好&lt;/p&gt;
&lt;p&gt;這就是先有東西 (寫作)
留下想法
然後再去重新組織 (重構)
然後反覆迭代&lt;/p&gt;
&lt;p&gt;用這個內容
再去反覆 遞迴 (recursive)
這篇文章 可以再長出下一篇
或者變成下一篇的 input
下一篇就一樣先有內容
再重構 …&lt;/p&gt;
&lt;p&gt;如此反覆就會慢慢出現  #複利效應 …&lt;/p&gt;
&lt;p&gt;—
#複利寫作 這個詞是今天 臨時想出來的 …
這篇就是 先把想來留下來&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;原始資料&#34;&gt;原始資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;發表時間：2023/02/05&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/pfbid0uer1Y8N1FCGqcVZ5k4rZwK9dFbQzUD3Rf841AZ2CFbJZDGYrRdFqbtBoBVYkjScMl&#34;&gt;原文連結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 上下文背後的意思</title>
      <link>https://www.gtcafe.com/portal/itlds/2023/0203_context/</link>
      <pubDate>Fri, 03 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2023/0203_context/</guid>
      <description>
        
        
        &lt;p&gt;#Context (上下文 / 前後文)&lt;/p&gt;
&lt;p&gt;簡言之，有時間序列
有序列，代表有個清單
清單裡面有一些集合事件 / 任務 / 情境
例如情境 A, B, C, D, E ..&lt;/p&gt;
&lt;p&gt;所謂的 Context 就是 A ~ E 的次序或者關係
次序代表的是 #循序的，
像是: E -&amp;gt; D -&amp;gt; A -&amp;gt; C &amp;hellip; (一個 linkedlist)
或者是 #關係次序，就是 Tree:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A -&amp;gt; (B, C)&lt;/li&gt;
&lt;li&gt;B -&amp;gt; E&lt;/li&gt;
&lt;li&gt;C-&amp;gt; F&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不管是 #循序, 還是 #關聯次序
確立這些概念的，稱為 #領域知識
像是晶圓製造工序 、軟體開發流程 (SDLC)、音樂製作程序 &amp;hellip;. etc&lt;/p&gt;
&lt;p&gt;#DDD&lt;/p&gt;
&lt;h2 id=&#34;原始資料&#34;&gt;原始資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;發表時間：2023/02/03&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/pfbid0uCk93gysNDejvsp4geaX1nM7hVfS7m8YcJjWRBdoNagSds29xQMLo19TWc4wQoddl&#34;&gt;原文連結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 丟球 - 有效的溝通與說服力</title>
      <link>https://www.gtcafe.com/portal/itlds/2023/0203_throws-ball/</link>
      <pubDate>Fri, 03 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2023/0203_throws-ball/</guid>
      <description>
        
        
        &lt;p&gt;昨天跟朋友聊到的故事 &amp;hellip;&lt;/p&gt;
&lt;p&gt;(一直以為出處是 #賈伯斯自傳 XD)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;有一次我們和賈伯斯開廣告會議，檢閱一支受到推薦的 iMac 廣告片，大家開始爭執片中該放進多少訊息。創意小組認為如果整支片子只強調 iMac 其中一個主要特性，效果會最好。可是賈伯斯一直覺得還有四、五項重點應該在片中說清楚。在他看來，這三十秒的廣告容納得了所有訊息。&lt;/p&gt;
&lt;p&gt;爭辯幾分鐘之後，一直不見賈伯斯有讓步的跡象。這時，Chiat 團隊的負責人克勞，腦袋裡出現一個小聲音，他決定趁這機會現場示範給賈伯斯看。&lt;/p&gt;
&lt;p&gt;克勞從他的筆記本裡撕了五張紙下來（沒錯，是筆記本。當時的克勞不喜歡用筆電），捏成五團紙球，開始表演。&lt;/p&gt;
&lt;p&gt;「賈伯斯，接住！」克勞邊說邊把一團紙球丟向他。賈伯斯輕鬆接住，反丟回來。&lt;/p&gt;
&lt;p&gt;「這就是成功的廣告。」克勞說。&lt;/p&gt;
&lt;p&gt;「現在再接住這個，」他說著，同時把五團紙球都往賈伯斯的方向丟。賈伯斯一個也沒接到，紙球全掉在桌上和地板上。&lt;/p&gt;
&lt;p&gt;「這是失敗的廣告。」克勞說。&lt;/p&gt;
&lt;p&gt;我從來沒見過這種示範方式，所以看得挺樂的。這是一個很具說服力的證明手法：你要人們注意的事情越多，他們記得的事情就越少。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以後你老闆 #全都要 的時候
用這招試看看
前提是你敢 XDD&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.books.com.tw/products/0010584097&#34;&gt;簡單：打破複雜，創造絕對優勢&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;原始資料&#34;&gt;原始資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;發表時間：2023/02/03&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/pfbid02iAt5j36AcqqQ4dq3dgrbX7XH3rnUhg7sQzE64TTcUDbbi6KHgnnEvXAcPBDwsrrrl&#34;&gt;原文連結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 識別的本質</title>
      <link>https://www.gtcafe.com/portal/itlds/2023/0201_identity/</link>
      <pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2023/0201_identity/</guid>
      <description>
        
        
        &lt;p&gt;#識別 (Identity) 這個議題
在未來會越來越重要
特別是 AI 真的流行起來之後&lt;/p&gt;
&lt;p&gt;#識別 簡單說像 身分證、指紋辨識、FaceId
藍勾勾、網址的憑證、軟體版本唯一性 … etc
總之，證明 “Who” 的，
具備唯一性
就是識別&lt;/p&gt;
&lt;p&gt;識別 除了用在單一個人
概念延伸的就是一種 #認可 #認同 #信任 概念
生活中常見的就是各式各樣的證書 (Certificate)
畢業證書, 離職證明, 聘書
鈔票, 貨幣, 法幣 … 都算
貨幣代表國民認同國家
這個國家的群體認同與信任的
不然鈔票就只是個沒意義的紙或者銅板&lt;/p&gt;
&lt;p&gt;識別一個人是不是 Rick
就是透過一些特徵值判斷
專業的說法: #圖靈測試
只要著 Facebook 上面
然後判斷 Rick 帳號發出來廢文的特徵
就可以確定
那是 Rick 本人發的廢文
那些特徵值就是 識別 Rick
的方法 …&lt;/p&gt;
&lt;p&gt;—
這篇廢文值一塊兩毛五 …&lt;/p&gt;
&lt;p&gt;—
一直覺得
好像跟某個同事說過類似的廢文 @@ …&lt;/p&gt;
&lt;h2 id=&#34;原始資料&#34;&gt;原始資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;發表時間：2023/02/01&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/pfbid0PznaN7HdRiV7KguRnZD99haEb8AcemfnHBx45miGVcH7AF7X5ExNFypB6mxM4n8ol&#34;&gt;原文連結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 識別的本質</title>
      <link>https://www.gtcafe.com/portal/itlds/2023/0126_meditation/</link>
      <pubDate>Thu, 26 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2023/0126_meditation/</guid>
      <description>
        
        
        &lt;p&gt;#冥想 兩年多 [1]，
方法都是設定 #固定時間長度
然後算 #呼吸的次數，也就是數數。&lt;/p&gt;
&lt;p&gt;理想的狀況，
在固定的時間之內 (15m or 20m)
呼吸的次數越少越好，
意味著每次吸氣的深度與吐氣的長度
都越久越好，過程中不斷的掃描身體
觀察自己。&lt;/p&gt;
&lt;p&gt;2023 開始調整固定的為呼吸的次數，
然後看看時間會多久，
主次對調，原本以時間為主，
改成以呼吸次數為主。&lt;/p&gt;
&lt;p&gt;這種感覺
跟彈琴時算拍子很像
而且簡單很多 XD
但跟音樂一樣
腦袋都要清空
專注在一個點
音樂是專注在音符
冥想是專注在觀察&lt;/p&gt;
&lt;p&gt;希望可以練到飄出去到處亂晃 (???&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/pfbid0ZhQy5EHJr1pVFeQCFSNFnP7RiLZ9xt2UoH7ZWzpW2DAw32wt5SwXHVbHsBigAgVfl&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/pfbid0ZhQy5EHJr1pVFeQCFSNFnP7RiLZ9xt2UoH7ZWzpW2DAw32wt5SwXHVbHsBigAgVfl&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;原始資料&#34;&gt;原始資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;發表時間：2023/01/26&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/pfbid08GmnZdVicTCUsjiFsoBV1cNQU1WT3eLaphrASU6LFhCGAEmUJUhEnhgJYG2pR5nzl&#34;&gt;原文連結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 砸吉他 燒開水</title>
      <link>https://www.gtcafe.com/portal/itlds/2023/0123_crash-guitar/</link>
      <pubDate>Mon, 23 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2023/0123_crash-guitar/</guid>
      <description>
        
        
        &lt;p&gt;聊聊 #砸吉他燒開水 的故事&lt;/p&gt;
&lt;p&gt;之前 [1] 聊到家裡的風琴
和我學音樂的歷程
提到除了風琴
還有一把 2/3 訂製的吉他
後來被我砸了 拿去燒開水 ..
記錄 #砸吉他燒開水 的背景故事
讓我們緬懷那把吉他 XDD&lt;/p&gt;
&lt;p&gt;這要從老家的背景說起 ..&lt;/p&gt;
&lt;p&gt;老家沒什麼現代化設施：像是自來水
一直以來都是用地下水 (到現在還是)
洗澡也沒有熱水器可以用&lt;/p&gt;
&lt;p&gt;所以小時候洗澡都要預先燒好的熱水
然後需要洗的人
自己去提冷水 + 熱水
放在大的水桶裡
才能洗澡&lt;/p&gt;
&lt;p&gt;所以燒開水是每天的工作
小時候家裡就是男生 + 菜的做：就是我
所以國小映像中
每天放學下課不是寫作業
而是燒開水&lt;/p&gt;
&lt;p&gt;燒開水總要有個爐子
要有木材可以燒
木材哪來的，我有點記不得了
總之，爐子旁就是有很多木材
有時候木材不夠了
就會去院子裡的竹林找乾樹枝燒
找東西燒
每天都要做的生存技能&lt;/p&gt;
&lt;p&gt;有了木材
就要生火燒柴，
把水煮熱
每天就是這樣燒 ..
(照片是專科時拍的,
後來長大後
燒開水改用瓦斯爐取代)&lt;/p&gt;
&lt;p&gt;別小看這個燒開水的過程
小鬼會有很多想像
把爐子當作城堡 / 三國演義的城池
然後爐子常常會被我弄壞
我就會重新用磚塊 和 濕土重蓋
爐子旁邊常常有很多螞蟻窩
這時候就開始想像自己是諸葛孔明
螞蟻在攻城
諸葛孔明用火攻
燒城堡 ＋ 燒螞蟻 ..&lt;/p&gt;
&lt;p&gt;燒一次的開水
小鬼就可自己在那邊玩起來
火燒藤甲兵的劇本 ..
而且百玩不膩
每天玩 ..&lt;/p&gt;
&lt;p&gt;所以之前提到 [1] 的燒吉他是怎麼回事？&lt;/p&gt;
&lt;p&gt;樂器這種東西
或者說木造的東西
如果沒有適度保養, ex 控制溫/濕度
很容易就會變形
加上木吉他 (民謠吉他) 用的是鋼弦
張力大 ..&lt;/p&gt;
&lt;p&gt;綜合木頭 + 鋼弦張力大這些因素
還有我真的沒看過我哥摸過那把琴
琴在房間裡 N 年早就變形
弦斷的斷, 琴身也早就不成琴形了 ..&lt;/p&gt;
&lt;p&gt;某天下課要燒開水了
不知道為啥那把吉他就出現在
燒開水爐子的旁邊
旁邊本來是放木材的&lt;/p&gt;
&lt;p&gt;下課要開工點火了
沒有木材可以燒
看到那把已經變形又破爛不堪的吉他
我腦袋想的是：這次火燒藤甲兵劇本要怎麼玩 &amp;hellip;&lt;/p&gt;
&lt;p&gt;那時候想到的應該是弄成木流牛馬 ..
欺騙司馬懿之類的劇情
(那時候已經在瘋狂三國演義了 &amp;hellip;)
反正先把琴砸了
確定可以放進去爐子燒
所以 &amp;hellip; 焚琴煮鶴 &amp;hellip;. 大概就是這樣的場景
然後 &amp;hellip; 那天燒出來的水
並沒有任何音符 XDD&lt;/p&gt;
&lt;p&gt;所以這就是 #砸吉他燒開水 ..&lt;/p&gt;
&lt;p&gt;#翻拍舊照片
只有找到這張有關的
照片是在院子拍的
後面是廚房 + 浴室&lt;/p&gt;
&lt;p&gt;#過年講故事還要自爆
#覺得這篇會歪樓
#敲完明年轉貼就好&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/pfbid036RW1bjJuWcmCX1h6WwgvnFoQzsmnqbEP1UtR1B49EnHeRCnjPfaQgm76zcuSPU9il&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/pfbid036RW1bjJuWcmCX1h6WwgvnFoQzsmnqbEP1UtR1B49EnHeRCnjPfaQgm76zcuSPU9il&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;原始資料&#34;&gt;原始資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;發表時間：2023/01/26&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/pfbid02pH3rAHhHKWGhyLN62f19ZwT96SeuaaDmoCtMid41vB4yUnp388xn47gVmtgtwQYPl&#34;&gt;原文連結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 聊聊個人音樂的學習故事</title>
      <link>https://www.gtcafe.com/portal/itlds/2023/0120_learning-path-of-music/</link>
      <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2023/0120_learning-path-of-music/</guid>
      <description>
        
        
        &lt;p&gt;#回憶 #吉他 #鋼琴&lt;/p&gt;
&lt;p&gt;最近跟一些朋友聊到 我自己學音樂的歷程，大概都會提到這段故事 #風琴 還有 #砸吉他 的故事，敲下來好了。。。 XD&lt;/p&gt;
&lt;p&gt;#古典吉他 是我第一次有拜師學的樂器，那時候很單純，知道自己很喜歡音樂，然後很想要學個樂器，可以把歌曲完整詮釋出來，受理查克萊德門的影響，心裡的首選當然是 #鋼琴。但是鋼琴可不是每個人家裡都買得起，或者學得起的，特別在鄉下地方。&lt;/p&gt;
&lt;p&gt;上專科時，學校雖然是以社團活躍而著名，但是學校還是沒有鋼琴社，那時候沒想太多，看到有吉他社，就衝了，也不知道吉他還有分古典吉他、木吉他 (民謠吉他)、電吉他 &amp;hellip;&lt;/p&gt;
&lt;p&gt;在那之前，家裡有一台風琴，據說是老爸買給老姐的生日禮物，但我從來沒看過老姐摸過那台風琴。家裡還有一把吉他，訂製的 2/3 Size，前三格有標記音階，老爹訂製給老哥的生日禮物。同樣的，我從來也沒看過我哥拿過那把吉他。然後我只記得，小時候生日老爸曾買一把衝鋒玩具槍給我 &amp;hellip; 完全錯頻 &amp;hellip; XDD&lt;/p&gt;
&lt;p&gt;後來風琴 (照片) 都是我在玩的，常常坐下來，就是一整天，當時候家裡八點擋看啥，主題曲我大概都可以靠聽力找出主旋律，後來發現把旋律都平移幾個位置，會得到一樣的旋律，但是音高不一樣 &amp;hellip; 後來才知道這概念叫做 &amp;ldquo;轉調&amp;rdquo; &amp;hellip; 還發現琴鍵每間隔幾個音亂彈都很好聽，後來才知道那概念叫做 &amp;ldquo;和弦&amp;rdquo; &amp;hellip; 國小的時候，彈琴大概是最快樂的光了 &amp;hellip; &amp;ldquo;後來&amp;rdquo;，其實都已經是上專科之後，真的開始學古典吉他之後的事了 ..&lt;/p&gt;
&lt;p&gt;那把訂製的吉他呢？
後來被我砸了 [1]，燒開水去了 XDDD&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;照片中的琴
擺在那應該超過 40 年了
很有歷史感
試彈還可以發出聲音
滿滿的回憶殺&lt;/p&gt;
&lt;p&gt;旁邊的古典吉他，
則是我的第一把琴
這兩個琴都是初戀&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/pfbid0kjGtcxMYeXUu9EqQYdTtcamfFjpg6tKs3m44YrnSc26mvRPVvbQmykT1ipxBtQW5l&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/pfbid0kjGtcxMYeXUu9EqQYdTtcamfFjpg6tKs3m44YrnSc26mvRPVvbQmykT1ipxBtQW5l&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;原始資料&#34;&gt;原始資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;發表時間：2023/01/20&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/pfbid036RW1bjJuWcmCX1h6WwgvnFoQzsmnqbEP1UtR1B49EnHeRCnjPfaQgm76zcuSPU9il&#34;&gt;原文連結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 拆服務？分類？</title>
      <link>https://www.gtcafe.com/portal/itlds/2022/1129_meditation/</link>
      <pubDate>Tue, 29 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2022/1129_meditation/</guid>
      <description>
        
        
        &lt;p&gt;紀錄 #冥想 歷程，開始到現在差不多有兩年 …&lt;/p&gt;
&lt;h2 id=&#34;方法&#34;&gt;方法&lt;/h2&gt;
&lt;p&gt;網路上有很多方法，我用的是最普通的全身掃描方式，搭配數數集中注意力。每次深度呼吸都是一次數，每次數，都做全身掃描，像是放鬆肩頸、放鬆臉部肌肉、忽略某個部位的搔癢、感覺呼吸的流動、呼吸的溫度 … etc.&lt;/p&gt;
&lt;p&gt;剛開始練習冥想，思緒會到處亂跑，很容易被思緒拉著走，變得不知道在做啥。透過數數，可以把思緒拉回來，讓亂七八糟的思緒能被自己觀察。&lt;/p&gt;
&lt;h2 id=&#34;節奏&#34;&gt;節奏&lt;/h2&gt;
&lt;p&gt;我現在每次 20 分鐘，採坐姿，有時候也會站著。練習時間是每天早上起床後，盥洗後就先冥想。通常前一晚吃太飽、或者吃太多刺激性的食物，剛開始會影響冥想過程思緒，冥想練多了，可以開始掃描身體因為飲食造成的副作用。。。簡單說，身體在躁動，冥想過程都觀察的到，也有可能是老了的關係 XDD&lt;/p&gt;
&lt;h2 id=&#34;睡前冥想&#34;&gt;睡前冥想&lt;/h2&gt;
&lt;p&gt;有時候睡前也會冥想，特別是工作煩躁，或者睡不著的時候。以前睡不著就是看金庸小說，有時候看一下就有睡意，有時候一看就到天亮了 XDD&lt;/p&gt;
&lt;p&gt;冥想的好處是，可以清空今天整天工作的壓力，讓腦袋漸進式關機，然後比較容易入睡。因為我是很淺眠，一點風吹草動就會醒過來，所以睡眠品質一直是很在乎的事情，透過冥想，有些許改善。雖然改善睡眠，其實運動更有效 XDD&lt;/p&gt;
&lt;h2 id=&#34;好處&#34;&gt;好處&lt;/h2&gt;
&lt;p&gt;快兩年的練習，感覺好處不少，首先是思緒比以前都能更快的集中，要進入心流也更容易。當然這跟我配合作息也有關係。這兩年大概就是每天五點或五點半起床，然後開始冥想 20m，接下來吃早餐，去上班。通常八點到辦公室，因為很早到，不會有打擾，所以每天都可以專注至少 90m 左右，這一兩年也透過這樣的方式產出一些東西。&lt;/p&gt;
&lt;p&gt;除了能夠更專注，明顯有感覺的就是靈感與創造力更多，喇賽文可以寫更多的意思 XDD&lt;/p&gt;
&lt;p&gt;可能習慣用第三者觀察自己，觀察外部的人事物，很多事情可以觀察更多，所以可寫的東西變多了，剩下的就是花時間敲下來。。。觀察力變好從開會過程也更能夠察覺被歪樓，或者緊抓會議主軸。&lt;/p&gt;
&lt;p&gt;最後，冥想 好處多多，推薦大家都來練。。。不過練那麼久的呼吸，沒練成啥水之呼吸、火之呼吸 …&lt;/p&gt;
&lt;p&gt;—
附圖是我冥想紀錄的標題，格式是 冥想時間 / 呼吸次數&lt;/p&gt;
&lt;h2 id=&#34;原始資料&#34;&gt;原始資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;發表時間：2022/11/29&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/pfbid0ZhQy5EHJr1pVFeQCFSNFnP7RiLZ9xt2UoH7ZWzpW2DAw32wt5SwXHVbHsBigAgVfl&#34;&gt;原文連結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 拆服務？分類？</title>
      <link>https://www.gtcafe.com/portal/itlds/2022/0818/</link>
      <pubDate>Thu, 18 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2022/0818/</guid>
      <description>
        
        
        &lt;p&gt;Source: &lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/pfbid0Q8KPR6FYgcy81pPJu6ZEL9CHyvq3UnMFwjV8DNkGhr8J4a23QDdz8NqXwvSjRxZZl&#34;&gt;2022/08/18&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#分類 #拆服務 #拆組織&lt;/p&gt;
&lt;p&gt;物件導向的專有名詞：類別 (Class)，本質上就是 #分類 的概念。換言之，就是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;描述一個類別 (Class, n)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這件事情背後的本質就是在分類 (Classify, v)，也就是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一堆東西，先經過分類 (動作) 之後，定義類別 (名詞)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這個名詞定義的精準程度 (這裡牽涉到語言的字彙程度)，決定領域 (Domain) 涉入的深度。&lt;/p&gt;
&lt;p&gt;例如，電商領域的會員 (Member) 是領域知識，如果要用一個 Class 描述會員會怎麼描述？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Member&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    String firstName;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    String lastName;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    String age;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    String gender;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這個例子是結果了，如果反過來，先有一堆東西：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;firstName&lt;/li&gt;
&lt;li&gt;lastName&lt;/li&gt;
&lt;li&gt;age&lt;/li&gt;
&lt;li&gt;gender&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那會怎麼命名？經過分析可能會有以下 #名詞：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Profile&lt;/li&gt;
&lt;li&gt;Identity&lt;/li&gt;
&lt;li&gt;Member&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我的字彙有點少，反正至少有這三個 XDD&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;另外一個我常舉的例子，
通常是寫 Code 有一定經驗的人一定會 #想做 的:
(如果你沒感覺就 &amp;hellip;.)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一個 Class 裡有 20 個 Method&lt;/li&gt;
&lt;li&gt;一個 Method 有 1000 行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;換個角度，再舉一些例子：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一個組織有 30 個人&lt;/li&gt;
&lt;li&gt;一個房間有 300 坪&lt;/li&gt;
&lt;li&gt;一個書櫃有 300 本書&lt;/li&gt;
&lt;li&gt;一個系統裡有 30 個角色&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;這年代很多架構都是分散式架構，
大多都要拆服務，拆成微服務、奈米服務
很多人會說，要用一些方法來拆
像是現在流行的 #DDD ..&lt;/p&gt;
&lt;p&gt;其實如果你有從上看到這裡
大概就會知道我的直接概念就是
多就拆
拆就去管理依賴
不面對這問題
時間到了
他就會來面對你&lt;/p&gt;
&lt;p&gt;至於啥是多？
需要科學的量化方法？
還是團隊共識？
還是主管決？
只要大家看清楚就好&lt;/p&gt;
&lt;p&gt;不要真的要給團隊共識決
不敢決
決了也不敢負責任&lt;/p&gt;
&lt;p&gt;或者主管決
做了不好決策
該反應又不說
又靠北主管無能&lt;/p&gt;
&lt;p&gt;科學化方法自己卻沒有能力量化
因為連自己寫過多少 Code 都沒能力掌握&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 隨機論 還是 決定論</title>
      <link>https://www.gtcafe.com/portal/itlds/2020/0816/</link>
      <pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2020/0816/</guid>
      <description>
        
        
        &lt;p&gt;&lt;code&gt;隨機論&lt;/code&gt; 還是 &lt;code&gt;決定論&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;決定論：早就在哪邊等你了，必然的，因果，命運&lt;/li&gt;
&lt;li&gt;隨機論：無法預測的，偶然的，量子力學&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;無理數&#34;&gt;無理數&lt;/h2&gt;
&lt;p&gt;邊長為 1 的直角三角形，他的斜邊長度為  √2，讀作 #根號二，把這個數展開會得到一個沒有規則、且無法窮舉的數列，大約是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.414213562373095048801688724209 ..&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;類似於這種特別 &amp;ldquo;數&amp;rdquo;，還有像是 &lt;code&gt;圓周率 (pi)&lt;/code&gt;、&lt;a href=&#34;https://zh.wikipedia.org/wiki/E_(%E6%95%B0%E5%AD%A6%E5%B8%B8%E6%95%B0)&#34;&gt;自然對數底 (歐拉數 e)&lt;/a&gt; &amp;hellip;. 在數學上稱為 #無理數&lt;/p&gt;
&lt;p&gt;兩邊為 1 的直角三角形，透過工具可以畫得出來，也可以用工具量測出斜邊長約 1.414 &amp;hellip; 雖然可以具象的表達這個關係，但是理論上他是一個無法窮舉、永遠講不清的概念。&lt;/p&gt;
&lt;p&gt;前述提到 &lt;code&gt;畢氏定理&lt;/code&gt;、&lt;code&gt;無理數&lt;/code&gt; 的概念，數學講究 &lt;code&gt;證明&lt;/code&gt; ，也就 是說畢氏定理之所以是定理，需要被證明；同理，為什麼 √2 是無理數？也需要被證明。&lt;/p&gt;
&lt;p&gt;在邏輯上，這裡有個先後關係的概念：需要被證明，代表著這些定理、這些特殊的數早就已經存在，而且早就在哪裡等你了。所有的數學家都只是發現這些東西，然後用自己的工具證明，他發現這個定理。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;音樂的窮舉&#34;&gt;音樂的窮舉？&lt;/h2&gt;
&lt;p&gt;以前在音樂論壇看過這樣的討論：&lt;/p&gt;
&lt;p&gt;音樂理論本身是有限的，像是音階的數量、節拍的數量、歌曲的長度。基於這些有限的概念，可以推論出一個結論：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人類可以創作的歌曲數總量是有上限的，只是那個上限很大而已。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;聽起來好像有這麼回事。例如音階用鋼琴 88 鍵當作上限，節拍用最小的 32 分音符當最小單位，歌曲長度用 1 秒到 30 分鐘做單位、音軌用 1 ~ 300 做範圍。依照這樣的數量及，可以透過數學方法歸納出一個可以創作的歌曲數總量。&lt;/p&gt;
&lt;p&gt;看起來，音樂是個 &lt;code&gt;有理數&lt;/code&gt;，所以音樂是決定論。也就是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不是有什麼歌曲會被誰創作，而是歌曲早就在哪裡，等著被發現。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同樣的邏輯，套用在笑話上。人類的語言可以講幾個笑話？能否歸納出一個總量數字？好像可以。&lt;/p&gt;
&lt;p&gt;用中文來說，&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%BA%B7%E7%86%99%E5%AD%97%E5%85%B8&#34;&gt;康熙字典&lt;/a&gt; 的字有 47,000+ 個，算 50,000 好了。一篇笑話需要用到約 30 ~ 300 個字當範圍。基於這樣的條件，利用窮舉法，透過 AI 演算法可以把全世界的笑話都寫完。&lt;/p&gt;
&lt;p&gt;所以人類的笑話總數也是個有理數，他是決定論。因為笑話早就準備在哪裡，而不是等著被誰想出來。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;計算機的命定論&#34;&gt;計算機的命定論？&lt;/h2&gt;
&lt;p&gt;計算機透過二進位計算所有的東西，包含我們現在使用的各種軟體應用、或者通訊。&lt;/p&gt;
&lt;p&gt;在邏輯上來講，計算機上所有的東西都是可以經過運算得到定論的，不管是應用軟體的邏輯、還是密碼學裡面很多複雜的演算法，只要是在現代計算機上跑的程式，結果都已經是必然，早就已經決定的。&lt;/p&gt;
&lt;p&gt;人類的 DNA 是以四進位的 &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%9B%9B%E9%80%B2%E4%BD%8D&#34;&gt;遺傳密碼&lt;/a&gt; 表示，而量子計算機是三態，姑且想像成三進位。但不管是否是二進位、三進位、還是四進位，是否都代表著，這是一個可以被窮舉的排列組合，換言之：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人生是可以被演算出來的，生命並不存在&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是你現在所有的動作、所有的決定、腦袋想的事情，早就都已經是既定的事實在那邊，而你在做的只是像放音機那樣，有另一個高級的生命體幫你按下 Play 的按鈕，照著這些排列組合走而已。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;參考資料&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/E_(%E6%95%B0%E5%AD%A6%E5%B8%B8%E6%95%B0)&#34;&gt;自然對數底 (歐拉數 e)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%9B%9B%E9%80%B2%E4%BD%8D&#34;&gt;遺傳密碼&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%BA%B7%E7%86%99%E5%AD%97%E5%85%B8&#34;&gt;康熙字典&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;原始資料&#34;&gt;原始資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;發表時間：2020/08/16&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/pfbid023uJ5c1reS5CU72Z9bk8wacZUDHVubzgtvuKzY2kGM4HYdmrBaKF73sM2cRcdpRbLl&#34;&gt;原文連結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 開發者的環境</title>
      <link>https://www.gtcafe.com/portal/itlds/2020/0813_dev-env/</link>
      <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2020/0813_dev-env/</guid>
      <description>
        
        
        &lt;p&gt;朋友提出一個問題：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;他是開發者 (Developer) ，跟 SRE / MIS 申請一台 VM 開發用，但公司的政策是：不被允許可以更改作業系統的設定，像是 /etc 底下的東西，這樣是否合理？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;我的經驗與觀點是：開發人員必須要有一定的資源與彈性，做探索性的實驗。例如開發過程，需要自己裝一些工具、軟體、語言層級的套件。甚至開發的功能本身就有效能要求，那麼調整系統參數，像是 /etc、/proc 底下的東西、調整 database / cache 的設定，讓開發過程可以有彈性的探索與實驗，這個權限是 理所當然 的。&lt;/p&gt;
&lt;p&gt;然後開發人員把這種實驗 (lab) 環境弄壞是正常的，沒弄壞代表你對系統沒有做過嘗試，只知道應用層自己的狀況，出了應用層以外的東西都不知道。這寫出來的東西，基本上是無法面對真實世界的，或者是巨大的浪費。&lt;/p&gt;
&lt;p&gt;以前我在開發時，常會把 linux 搞壞、把 application server (tomcat, was, jboss) 搞壞、把 MySQL、mencached 搞壞、把 eclipse 、Apache 搞壞 &amp;hellip;.. 所以我很常用 VMWare 模擬各種奇怪的環境，甚至是網路。過程會把上述的東西的 config 倒來倒去，import / export (這是我看軟體設計的關鍵檢核點)，同一個版本裝很多個，試看不同的 config ，或者同時裝很多版本，然後餵同樣的 config ，或者資料。&lt;/p&gt;
&lt;p&gt;這些都是探索。為了這些探索，我會想辦法找資源，公司如果有資源，會盡可能利用。如果資源不夠，那就要靠關係（跟 IT / MIS，當時不叫 SRE / DevOps）搞好關係，再不然，就是投資自己，買好一點的電腦，跑 VM &amp;hellip; 現在還留一些當時特定環境的 VM &amp;hellip;&lt;/p&gt;
&lt;p&gt;我比較幸運，工作過程曾經有時間，或者說我自己就有這種探索的慾望，所以會做很多類似的實驗。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;回到問題本身，開發人員申請的開發用的機器，能否自己改作業系統的設定？&lt;/p&gt;
&lt;p&gt;我的回答：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;當然可以，不然等上線後請 SRE / Ops 幫你找問題？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;開發人員，要自己找出應用程式與系統的關係，甚至是效能的調教。以 Web App 來講，有些需要調教系統的 tcp 參數、openfile 常見的 fd &amp;hellip; 理想的狀況下，這些其實都是 developer 在上線前，必須 benchmark 出來，告訴 SRE / Ops 有哪一些系統參數要注意、 要調整、如何調、怎樣的情境要調整。同樣的，除了系統，應用層自己的參數，也就是一般 AP 層的 config，有哪一些可以調、怎麼調、為什麼調？有哪一些 #開關 可以開、可以關？( Feature Toggle 完全是個舊瓶新裝的東西）。&lt;/p&gt;
&lt;p&gt;developer 下一棒不是 SRE / Ops，前述的東西 QA 也應該找出來。至少要確認 AP 層的 config 個別是做啥的。&lt;/p&gt;
&lt;p&gt;Config 描述的是系統架構的介面，通常我看一個系統架構的第一步就是 config 掃過一輪，就大概知道有哪一些內外依賴，他們怎麼通訊的，搞清楚後才往下看資料結構、資料庫、應用框架。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;不過回到現實，那些作業系統層級的參數幾乎都是 SRE / Ops 找出來的。&lt;/p&gt;
&lt;p&gt;理想的應該是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Developer 利用 container 的資源限制方式，在本機就可以量測相關的資訊，例如寫一個比對照片的批次程序，量測這個程式的效能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;原始資料&#34;&gt;原始資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;發表時間：2020/08/13&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/pfbid02KjK2XsgjMF4hbzvnsJjCGnReEPMWPhixPJcnjRSXevJyonwY4rWHbj3PVdGm1yBfl&#34;&gt;原文連結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 你的系統架構</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0906/</link>
      <pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0906/</guid>
      <description>
        
        
        &lt;p&gt;你的系統架構&lt;/p&gt;
&lt;p&gt;很多人看不懂五線譜&lt;/p&gt;
&lt;p&gt;小提琴少一根弦&lt;/p&gt;
&lt;p&gt;鋼琴還沒調音，老闆問：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;鋼琴要調音？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;明天要去國家音樂廳演出&lt;/p&gt;
&lt;p&gt;鼓手還沒找到 吉他手當鼓手&lt;/p&gt;
&lt;p&gt;吉他手在交響樂團作啥？&lt;/p&gt;
&lt;p&gt;剛剛作曲打電話來說：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第十五到三四小節他重寫了，製作人要求的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;等一下寄原始檔給你&lt;/p&gt;
&lt;p&gt;他不知道&lt;/p&gt;
&lt;p&gt;你跟本沒工具可開檔&lt;/p&gt;
&lt;p&gt;然後 這天是星期五 星期一上台&lt;/p&gt;
&lt;p&gt;我到底在寫啥鬼&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0906.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/pfbid0BidiciQ2vG5AvQ2nnWbjTVSZ3eK1ExZnhGzhLUBWCyyPAVTAWsEdT47RdrDhZqnDl&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: Dev 和 Ops 誰有價值？</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/20190817/</link>
      <pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/20190817/</guid>
      <description>
        
        
        &lt;p&gt;跟朋友聊到這問題的看法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作曲 跟 演奏哪個有價值？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有點像二元論、雞生蛋蛋生雞的問題。&lt;/p&gt;
&lt;p&gt;作曲像生孩子，演奏是教育孩子。
作曲像創造生命，演奏授與靈魂。
作曲是 0 到 1，演奏是 1 - 100。
作曲是 developer, 編曲/演奏是 engineer [3]&lt;/p&gt;
&lt;p&gt;刻板映像：大部分的樂手瞧不起五月天
因為很芭樂，沒啥深度，也沒啥技術性
為了取悅而創作
就像很多開發者瞧不起 Windows
五月天就是寫給 80% 的人聽得懂的 [1]
Microsoft 就是為了搶下 80% 的市場
如此而已。&lt;/p&gt;
&lt;p&gt;寫歌這件事不難，寫出有共鳴的不容易 [1]
寫出來的歌是好是壞
有時候後天的包裝影響很大
#編曲 則是另一種包裝&lt;/p&gt;
&lt;p&gt;要賺錢，就要寫 80% 的人聽得懂的。
要表達自我，通常只有 20% 能接受。
閃靈這種黑死的風格，在台灣是很少人能接受的，
所以要賺錢，不會寫這種曲風。 (賺錢跟紅不紅不是絕對)
但是閃靈的歌 重新編曲成大家聽得懂的風格之後
接受度是很高的 像是 #暮沉武德殿 [2]&lt;/p&gt;
&lt;p&gt;我很常用 #詮釋 這個概念
樂手的工作，就是 詮釋 作曲者想表達的情緒
而作曲者則要用他的『工具』留下來，
讓樂手知道怎麼詮釋
所以樂譜上都會有很多 #表情 符號
不管是 fff, mf, 漸大漸小 &amp;hellip;. etc&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;同一個角色，都叫做郭靖、或者是張無忌
但是不同人飾演，就是有不同的味道、樣子
飾演就是一種對於角色的詮釋
創造角色的是金庸
金庸很重要，小說寫歷史
從歷史中寫小說，創造虛實融合的故事
但是讀歷史本身就是一件 hardcore ..
一種技術性的操作&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;所以作曲跟演奏哪個重要？
如果硬是要比個高下
作曲還是比較重要  屬於是 DNA
但有些歌曲很棒  但是經過重新詮釋後
像是伍佰寫的 #被動 ，原本寫給周華健唱
但在被伍佰重新編曲在演唱會演唱之前
應該很少人會喜歡這首歌&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;所以我個人不會給絕對的答案
不同領域 不同角度有不同看法
業務的價值 要技術與工程團隊支撐
技術與工程團隊 需要業務目標來挑戰
貶抑任一方
或者想比高下基本上沒啥意義
Dev &amp;amp; Ops 重點在合作
不在於誰比較重要&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://www.gtcafe.com/rickmidi/gossip/simple-complex/&#34;&gt;https://www.gtcafe.com/rickmidi/gossip/simple-complex/&lt;/a&gt;
[2] &lt;a href=&#34;https://www.youtube.com/watch?v=kta4ZAwI6rY&#34;&gt;https://www.youtube.com/watch?v=kta4ZAwI6rY&lt;/a&gt;
[3] &lt;a href=&#34;https://rickhw.github.io/2017/07/01/Management/Developer-or-Engineer/&#34;&gt;https://rickhw.github.io/2017/07/01/Management/Developer-or-Engineer/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/pfbid0269uX5QQZxxBBQCFQk9nbp2SnubVsmGdcYzr4u7GNJagbWFkQXULFs8qphUiaN4spl&#34;&gt;2019/08/17 (Backup)&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 退休</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0420_retirement/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0420_retirement/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10211086815805693&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10211086815805693&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;跟朋友聊到 #退休 的議題，我腦袋就是這場演講的內容。&lt;/p&gt;
&lt;p&gt;我常常問一個問題：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假設不缺錢，身體健康，不需要工作，你最想做什麼？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大部分的人工作為的是錢，除了錢之外呢？你的生命每天有一半以上的時間在工作，下班每天有八小時在睡覺，扣掉民生必需時間 2- 3 小時，跟親友相處的時間只有 1-2 小時，跟最親愛的人相處的時間可能只有一小時（除了睡覺）。&lt;/p&gt;
&lt;p&gt;那麼你人生的意義是什麼？&lt;/p&gt;
&lt;p&gt;退休了，不缺錢，有時間，有體力？聽過太多不切實際的想法，像是：環遊世界、學樂器、含飴弄孫、看書、學 OOXX &amp;hellip;&lt;/p&gt;
&lt;p&gt;說得直白點：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你有體力環遊世界？你知道什麼叫舟車勞頓？你有那個知識去探索世界？還是只是走馬看花？另一半願意跟你跑？有辦法跑？&lt;/li&gt;
&lt;li&gt;學樂器：這我聽過最多的，大多我都是勸退的，最重要的是不會欣賞。因為學樂器是很苦的，想要有成就感不要學樂器，而是學攝影。&lt;/li&gt;
&lt;li&gt;含飴弄孫：那要確定你能跟小孩好好溝通，可能你連跟同學都不知道要聊什麼了&lt;/li&gt;
&lt;li&gt;看書：看一輩子？平常閱讀習慣？能看長篇文字？現代人的閱讀能力我是打問號的&lt;/li&gt;
&lt;li&gt;學 OOXX ：醒醒吧阿宅&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;寫這段是因為，看過很多長輩（&amp;gt;60y），整天不知道做什麼，整天罵政府、出一張嘴。誇自己有年輕時有多厲害，然後呢？現在在做什麼？請問今年做了什麼？影響年輕人什麼？&lt;/p&gt;
&lt;p&gt;有一篇文章說：很多人三十歲就死了，只是七十歲才埋葬，一堆活死人整天在街上走。&lt;/p&gt;
&lt;p&gt;而吳念真這段說得很好，做自己想做的事，然後永不止息，保持熱忱，死在喜歡的事情上。然後 #幾歲 這件事情從來都不是問題，唯一的問題是你沒有想完成的事，你不知道走這一遭的目的是什麼。&lt;/p&gt;
&lt;p&gt;2009: &lt;a href=&#34;https://www.facebook.com/notes/rick-hwang/%E8%88%8A%E6%97%A5%E8%A8%98-%E9%80%80%E4%BC%91%E8%A6%8F%E5%8A%83/10152984238789115/?hc_location=ufi&#34;&gt;https://www.facebook.com/notes/rick-hwang/%E8%88%8A%E6%97%A5%E8%A8%98-%E9%80%80%E4%BC%91%E8%A6%8F%E5%8A%83/10152984238789115/?hc_location=ufi&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 入門 DDB</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0419-ddb/</link>
      <pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0419-ddb/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10211072729013532&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10211072729013532&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;「嚴格講，把手冊 K 完、做過 lab 只算入門而已，上了戰場才是學習的開始。」&lt;/p&gt;
&lt;p&gt;實務上，大部分的人不用說入門，可能連邊都沾不上。&lt;/p&gt;
&lt;p&gt;—
#DynamoDB 是這幾年花時間研究的 #NoSQL，他還滿複雜的、有不少負面的評價、也有很多好的精神在。今天跟同事介紹了基本概念還有 design principle &amp;hellip; 說明的過程又發現自己沒搞清楚的東西，分享過程收獲最多的往往是自己。&lt;/p&gt;
&lt;p&gt;我學東西的原則就是找一個範圍最大的，已經被證明可用的，然後把他學透、當主軸、了解原理、相關資源、了解他的優劣、使用場景、使用情境。熟了之後，才開始橫向擴展學習，開始質疑。&lt;/p&gt;
&lt;p&gt;這種東西通常實作他的會是一群這個領域的專家，通常我比較不會去質疑他能不能做什麼，而是質疑自己能否去了解他、駕馭它、善用它。&lt;/p&gt;
&lt;p&gt;這跟買音樂設備一樣，往往人家的設計是遠超過我們的需求的，大部分的人用到的只是設備功能的 1% 不到，然後多人就會開始下評論。這點好像啥領域都一樣，沒讀完手冊就開始幹樵的一堆。以前我買設備前，通常手冊都 k 過一次了才考慮要不要買 XD&lt;/p&gt;
&lt;p&gt;嚴格講，把手冊 K 完、做過 lab 只算入門而已，上了戰場才是學習的開始。&lt;/p&gt;
&lt;p&gt;這跟 #SRE 講到的想法一致：『值得警惕的是，理解一個系統應該如何工作並不能使人成為專家。只有靠調查系統為何不能正常工作才行。』&lt;/p&gt;
&lt;p&gt;PS: 文中提到 AWS CTO 的論文我 k 過，大部分看不懂 XD&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rickhw.github.io/2016/08/17/AWS/Study-Notes-DynamoDB/&#34;&gt;https://rickhw.github.io/2016/08/17/AWS/Study-Notes-DynamoDB/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#AWS
#NoSQL
#RDBMS&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 重構</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0416_refactoring/</link>
      <pubDate>Tue, 16 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0416_refactoring/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://rickhw.github.io/2017/11/04/Management/Re-org/&#34;&gt;https://rickhw.github.io/2017/11/04/Management/Re-org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#重構 (#Refactoring) 是軟體工程的名詞，也是本經典的著作（現在已經第二版）。簡言之就是透過系統性的 #實踐方法，讓程式碼更容易維護、更容易閱讀，但不影響產出結果。&lt;/p&gt;
&lt;p&gt;我把程式碼當作文章的一種，換言之寫文章不難，寫出好文章、有深度內容的，但能讓別人容易閱讀、理解的不容易。讀和寫是兩個能力，而寫是為了之後的閱讀，所以寫好文章的能力很重要，但只要花時間調整，文章會越來越好。而重構的目的就是讓下次的閱讀者，能夠更了解其中的意涵。&lt;/p&gt;
&lt;p&gt;實際上，重構在生活中到處都有，每個人每年都要重構自己，包含 各種人事物的斷捨離、歲末大掃除、企業組織重整、書架、生涯規劃、自己的作品、人際網路 &amp;hellip;. 重構的感覺是什麼？大概就是把整年沒打掃的房間，打掃之後的舒暢感。&lt;/p&gt;
&lt;p&gt;#去蕪存菁，#斷捨離&lt;/p&gt;
&lt;p&gt;重構會讓程式更好維護、更容易閱讀。&lt;/p&gt;
&lt;p&gt;執行重構，我第一件會做的是：變數與函式的命名。我自己的原則是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;語意重要性優先於變數的長度 (講清楚優先)&lt;/li&gt;
&lt;li&gt;每行程式長度 80 chars 以內&lt;/li&gt;
&lt;li&gt;可區分邏輯區塊與段落&lt;/li&gt;
&lt;li&gt;用詞詞性要思考&lt;/li&gt;
&lt;li&gt;單一原則&lt;/li&gt;
&lt;li&gt;商業功能：流程 &amp;gt; 邏輯&lt;/li&gt;
&lt;li&gt;效能功能：邏輯 &amp;gt; 流程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重構這本書提到很多人使用 IDE 寫扣的關鍵，是因為 #重構 功能的完整性。有時候我為啥還會開 Eclipse 寫東西，除了熟悉之外，重構是很重要的因素之ㄧ。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 金庸</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/blogged__0316-jinyoung/</link>
      <pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/blogged__0316-jinyoung/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210906113368245&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210906113368245&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1994 年 #倚天屠龍記 的這首配樂：#倆倆相忘 不管是詞、曲，還是編曲，都是經典中的經典。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;附圖是金庸 原著小說 (第三版) 中的截圖，原著小說的詞整理如下：&lt;/p&gt;
&lt;p&gt;世情推物理，人生貴適意。
想人間造物搬興廢，吉藏凶，凶暗吉。&lt;/p&gt;
&lt;p&gt;貴那能長富貴，日盈昃月滿虧蝕。
地下東南，天高西北，天地尚無完體。&lt;/p&gt;
&lt;p&gt;展放愁眉，休爭閒氣。
今日容顏，老如昨日。
古往今來，恁須盡知，
賢的愚的，貧的和富的。&lt;/p&gt;
&lt;p&gt;到頭這一身，難逃那一日。
受用了一朝，一朝便宜。
百歲光陰，七十者稀。
急急流年，滔滔逝水。&lt;/p&gt;
&lt;p&gt;金庸用這段，其實是元曲 #關漢卿 的作品。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;1994 年版的插曲： #倆倆相忘，詞：厲曼婷，演唱：辛曉琪&lt;/p&gt;
&lt;p&gt;拈朵微笑的花　想一番人世變化　到頭來輸贏又何妨
日與月互消長　富與貴難久長　今早的容顏老於昨晚&lt;/p&gt;
&lt;p&gt;眉間放一字寬　看一段人世風光　誰不是把悲喜在嘗
海連天走不完　恩怨難計算　昨日非今日該忘&lt;/p&gt;
&lt;p&gt;浪滔滔人渺渺　青春鳥飛去了　縱然是千古風流浪裡搖
風瀟瀟人渺渺　快意刀山中草　愛恨的百般滋味隨風飄&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;曲與編曲:&lt;/p&gt;
&lt;p&gt;整首曲子的旋律依照小說人物的背景設計：#小昭。小昭是西域波西人，也就今天的土耳其。在作曲與編曲上，使用了 #阿拉伯音階 呈現出異國風采的旋律，強化了小昭的背景。&lt;/p&gt;
&lt;p&gt;#金庸&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=KYLDv5r5eb0&#34;&gt;https://www.youtube.com/watch?v=KYLDv5r5eb0&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 開發鬼笑話</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0319_problems/</link>
      <pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0319_problems/</guid>
      <description>
        
        
        &lt;p&gt;一些觀察的現象：&lt;/p&gt;
&lt;p&gt;為了達到 X 的需要 (A + B + C) 都滿足。
因為時程，所以只做了 A, A 只是個能動的東西,
B/C 會讓 A 可長可久, 可維護, 可靠.&lt;/p&gt;
&lt;p&gt;一年後, X 出問題了.
但是大家卻以為 X = (A + B + C) 都完成了.
然後問為什麼這麼不穩定？
然後又要把故事講一次.&lt;/p&gt;
&lt;p&gt;因為時間久遠，所以講出來的故事長這樣：
X = A + B * C 才能完成.
花了很長時間說明，
終於搞懂 X = A + B * C
但卻已經忘了原來是 X = A + B + C&lt;/p&gt;
&lt;p&gt;經過兩個月的努力 X = A + B * C 完成了
但是 X 卻變成 X&amp;rsquo; 了
X&amp;rsquo; 上線一個月爆炸了
這時候來了一個外力，告訴大家，
應該用 Y = I * J + K 才能解決 X&amp;rsquo; 的需求
然後又開始一個新的專案叫做 Y
準備把 X&amp;rsquo; 換掉.
這時候已經沒人再提 X = A + B + C&lt;/p&gt;
&lt;p&gt;我應該去寫小說的。。。。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210921592795221&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210921592795221&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 質能轉換</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0316_3body/</link>
      <pubDate>Sat, 16 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0316_3body/</guid>
      <description>
        
        
        &lt;p&gt;source: &lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210904993180241&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210904993180241&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;三個領域物理能量的 #轉換 例子，日常生活中一直都存在：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;#視覺 (Vision)
1-1. 攝影：光影 (頻率) -&amp;gt; 鏡頭 (類比) -&amp;gt; 感光元件 (A/D) 轉成數位訊號 -&amp;gt; 處理器 (編碼) -&amp;gt; 儲存 (Storage)
1-2. 看照片：存在 Storage -&amp;gt; 讀取 -&amp;gt; 透過 D/A 轉換 -&amp;gt; 面板反應成像 -&amp;gt; 發光&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;聽覺
2-1. 錄音：聲音 (頻率) &amp;ndash;&amp;gt; 收音 (類比) -&amp;gt; 感應線圈 -&amp;gt; 訊號轉換 (A/D) -&amp;gt; 轉成數位訊號 (Digital Audio) -&amp;gt; 儲存 (Storage)
2-2. 放音：儲存 &amp;ndash;&amp;gt; 讀取 &amp;ndash;&amp;gt; Digital Audio 資料送給 A/D 轉換器 -&amp;gt; 送給喇叭 -&amp;gt; 發出聲音&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;溝通
3-1. 聽講：嘴巴發聲 -&amp;gt; 空氣 -&amp;gt; 耳朵收音 -&amp;gt; 聽到 (聲音轉成訊號) -&amp;gt; 腦袋轉換 -&amp;gt; 理解
3-2. 演說：腦袋裡的想法 &amp;ndash;&amp;gt; 轉換語言 -&amp;gt; 嘴巴發聲 -&amp;gt; 傳到空氣
其實就是我說過的兩個人的溝通，其實是六個人的對話  [1]。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;能量形式的轉換，如果說意念，也是一種能量，那麼每次的轉換，都會有損失，這就是 #溝通成本。&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210550709083360&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210550709083360&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 滷肉攤架構</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0315_arch/</link>
      <pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0315_arch/</guid>
      <description>
        
        
        &lt;p&gt;source: &lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210901702257970&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210901702257970&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;開一家店，賣滷肉飯 + 貢丸湯，
一個人，獨立服務客人，
這是 #單體  (#Monolithic)。&lt;/p&gt;
&lt;p&gt;開一家店，讓別人加盟一起賣滷肉飯，
這是 #可擴展 (#Scalable) 。&lt;/p&gt;
&lt;p&gt;僱兩個人一起煮菜，這叫 #高可用 (#HighAvailable, HA)
擺小菜讓客人等待時可以吃，這叫做緩存 (#Cache)，
門口限制進入的數量，這叫做限流 (#RateLimit)，
客人進來平均分配座位，這叫負載平衡 (#LoadBalancer)
這家店只有一個入口，這是 #APIGateway。&lt;/p&gt;
&lt;p&gt;開一家店，
同時賣滷肉飯、肉圓、雞排、蚵仔煎、燒烤、漢堡，
他們有個共用的購買路線、結帳流程、
統一的招牌格式、收盤的程序 &amp;hellip;.
這是 #微服務 (Microservices)。&lt;/p&gt;
&lt;p&gt;為了讓每個攤位快速進駐，
用了一套同規格的桌子，這叫 #容器。
可以讓大家快速進駐時，可以方便隨時調整
所以用了動態安排的方法，這叫做編排 (#Orchestration)
每個攤位都可以限流、知道攤位狀況，
這叫做 #ServiceMesh&lt;/p&gt;
&lt;p&gt;一顆肉圓，分別放在兩個盤子，這叫做分片 (#Sharding)
客人點一顆肉圓，準備兩份，這叫做副本 (#Replication)
一些盤子分別散在幾張桌子，這叫做分區 (#Partition) &amp;hellip;&lt;/p&gt;
&lt;p&gt;用兩個爐子，一個蒸肉圓，一個保溫。
這叫做 #MasterSlave。&lt;/p&gt;
&lt;p&gt;開兩家店，一家營業，
另一家買一樣的設備，備用，
這叫做 #異地備援 的 #ActiveStandby Mode (AS Mode)&lt;/p&gt;
&lt;p&gt;開一家店，
不用雇人，擺幾台機器抓娃娃，就可以自己賺錢了，
這是 #Serverless &amp;hellip;.&lt;/p&gt;
&lt;p&gt;弄一個賣場，裡面啥都可以擺，
有倉庫，也有動線，有可以客製化的結帳台，
有娃娃機、各式各樣的桌子、
這叫做 #雲服務。。。&lt;/p&gt;
&lt;p&gt;把上面的東西全部擺在一體育館，
稱為 單體分散微服務 Serverless 架構 (誤）&lt;/p&gt;
&lt;p&gt;店還沒開成，大家吵成一團，
一個人出來說：我們一起努力把店開成吧～～
這個人是 Agile Coach&lt;/p&gt;
&lt;p&gt;&amp;hellip;.. 我掰不下去了。。。。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 組織政治</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0308_org/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0308_org/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210868323543523&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210868323543523&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;記錄一件很多年前發生過的事情：&lt;/p&gt;
&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;
&lt;p&gt;上一個工作，我大概剛 on board 一個月。&lt;/p&gt;
&lt;p&gt;空降 CTO (在米國) 發一封信，給各個 Sites (TPE, WH, ZH, US)，各單位的大頭 (從業務、工程、工廠、後勤行政、分公司)，內容大概是說明大家以後是一起合作的團隊，需要各單位協助安排資源。&lt;/p&gt;
&lt;p&gt;這個事業部是一家大公司裡的新事業部，CTO 是空降的，其他地方的頭不是原本的地頭蛇，不然就是從外面找來的空降。我是當時其中一的一個，只是我是新加入，但是要從頭開始建立團隊的人。&lt;/p&gt;
&lt;p&gt;基於這樣的背景之下，這封 Email 內容後來發生以下問題：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有些組織名稱一樣，像是開發部、QA .. 而實際上是分屬於軟、硬體的，內容很多人有看沒有懂。&lt;/li&gt;
&lt;li&gt;因為組織名稱一樣，兩個頭分別不認識彼此，因此在信件裡出現分工問題，例如他講測試的時候，同時打到四個人，但是四個分屬不同專業背景的測試。軟硬體的測試專業又天差地遠。&lt;/li&gt;
&lt;li&gt;CTO 有出來協助離清楚，但 CTO 也畫不出組織架構圖，換言之，無法搞清楚這些人的功能別。&lt;/li&gt;
&lt;li&gt;地頭蛇很強勢，直接回信亮 Title，例如：我是 XX 區 OO 負責人，這件事情我覺得如何如何 &amp;hellip;. (Email 裡就開幹了)&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;問題&#34;&gt;問題&lt;/h1&gt;
&lt;p&gt;CTO 沒有釐清楚這些人的狀況之下，在跨地區、跨時區、跨語言的背景，發這樣的信，造成誤解與溝通衝突。&lt;/p&gt;
&lt;p&gt;原集團 CEO 沒有協助新 CTO 把這些地頭蛇搞定，而讓他們在不清楚狀況之下落入溝通風暴。&lt;/p&gt;
&lt;p&gt;地頭蛇很自以為是，對於新來的空降頭配合度低，嚴重的穀倉現象。&lt;/p&gt;
&lt;h1 id=&#34;解決&#34;&gt;解決&lt;/h1&gt;
&lt;p&gt;CTO 開始巡迴、到處拜碼頭，約各地的頭吃飯喇低賽。CEO 直接跟地頭蛇摸頭，讓地頭蛇知道有新任務，要求大家全力支援新事業處的 CTO。&lt;/p&gt;
&lt;p&gt;過程中我受到當時 IT VP 協助甚多，也去跟他們原本事業處的各地的頭碰面、喇低賽。建立 Connection 之後，後來的事情才有辦法開始做，也就是真正團隊內部的事。&lt;/p&gt;
&lt;p&gt;這件事情一直放在我心裡，因為看到一個組織的運作，如果沒有適度的潤滑，沒有清楚的分工與組織，組織名稱重複，加上跨區、跨文化、跨語言。衝突是天天上演，根本不需要談目標。&lt;/p&gt;
&lt;p&gt;#ProtectedMessage.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這故事後來有一些有趣的發酵：&lt;/p&gt;
&lt;p&gt;各地的頭開始飛來飛去，Global IT VP、工廠 VP、工廠 QA 頭、硬體研發 QA/RD 頭、台灣區硬體研發頭、台灣區的 IT 頭、美國硬體研發頭、武漢業務頭、台灣業務頭、台灣分公司 GM、武漢 GM &amp;hellip; 反正一堆頭，飛來飛去，到處吃飯喝茶拉低賽。&lt;/p&gt;
&lt;p&gt;有趣的是同角色名稱，但不同領域的頭、不同地區的頭，相互拜碼頭。我那時候是新事業處軟體 QA 頭，結果去拜會了硬體研發 QA 頭、工廠 QA 頭，這些各地又有各地的頭。。。台灣區硬體 QA 頭跑來找我說，原來軟體也有 QA 啊～～～&lt;/p&gt;
&lt;p&gt;我都快 Qoo 了。。。&lt;/p&gt;
&lt;p&gt;其實，有時候發 Email 不相干的人不要加，除非策略上，就是要讓他爆。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 人類簡史 閱讀筆記</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0303-reading/</link>
      <pubDate>Sun, 03 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0303-reading/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210842588820171&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210842588820171&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近讀了以色列歷史學家  #哈拉瑞 的大作 #人類簡史、#未來簡史 ，書中提到很多關於 #人類意識 的議題，結論是人類只是計算機。&lt;/p&gt;
&lt;p&gt;理性的思考來說，我承認，人類的意識只是一段演算法，實際上背後是由另外一個高等智慧文明做創造。換言之，人類的 #自由意識 並不存在。&lt;/p&gt;
&lt;p&gt;但矛盾的是，感性的思考，我覺得 #自我意識 又是存在的，記憶是存在的，記憶與情緒構成人性，構成 #本我、#真我，形成一個有 #個性 的個體。&lt;/p&gt;
&lt;p&gt;附件連結是 2018 年下半年度，我一些想法的整理，這些文字，保留了我最存粹的想法，不侷限於外在的力量與約束，形成現在的我，形成一個 #真我。&lt;/p&gt;
&lt;p&gt;文長，要讀。如果你想了解我對於 #軟體工程 的想法，如果你想跟我對話關於 #價值觀、#生命週期、#努力與天賦、#人生觀、#溝通、#目標、#思考、#選擇  &amp;hellip; etc. &amp;hellip; 這段整理，是我們無言的對話，也是認識深度彼此的開始。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rickhw.github.io/2019/01/10/About/Thinkin-2018H2/&#34;&gt;https://rickhw.github.io/2019/01/10/About/Thinkin-2018H2/&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 依賴反轉</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0302-di/</link>
      <pubDate>Sat, 02 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0302-di/</guid>
      <description>
        
        
        &lt;p&gt;#done&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210837105563093&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210837105563093&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#坐車隨筆&lt;/p&gt;
&lt;p&gt;#依賴反轉 (Dependency Inversion, DI) 是軟體工程裡的一種原則，目的是解構兩個軟體元件之間的強關係、高耦合的現象，透過反轉的特性，讓高層次介面自行決定如何依賴其他元件，達到 #控制反轉 (#IoC, Inversion of Control) 的效果。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DI 最有名的說法：&amp;ldquo;Don’t call me, I’ll call you&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同樣的概念，應用在軟體，也可以應用在 #管理團隊 的協作，也就是把團隊之間依賴的特質，反轉回去。舉例來說，A 團隊執行任務，但依賴於 X 與 Y 團隊，B 團隊依賴於 Y 與 Z 團隊，A / B 兩團隊需要同時間交付任務，最後的 Battleneck  一定會出現在 Y 團隊，然後就會出現 Lock 現象。&lt;/p&gt;
&lt;p&gt;執行的任務與需求，只要透過依賴反轉的方式，例如讓 Y 團隊開發工具 (SDK / CLI / API)，給 A / B 團隊使用，讓這兩個團隊自行決定如何使用，然後就會得到結果，而不需要過度依賴於 Y 團隊，影響專案進行，也影響團隊士氣。&lt;/p&gt;
&lt;p&gt;而 A / B 兩團隊要使用 Y 團隊開發的工具，前提必須在這三個團隊之間定義 #介面 (#Interface)，也就是彼此協作的 #協議 (#Protocol)。透過這個協議，#解偶 任務執行過程中的 #阻塞現象 (Blocking)，然後以 #非同步方式 (Async) 執行任務，讓 A / B 之間不要因為排隊、或者強佔 Y 團隊的資源，造成 Lock 現象。&lt;/p&gt;
&lt;p&gt;Interface 與 Protocol 的定義是團隊跟團隊協作的必要，而這是管理者的工作，因為只有在資訊條件充裕的狀況之下，方能定義出這些東西。&lt;/p&gt;
&lt;p&gt;這些概念，在計算機科學裡，都有對應的模型與機制 (I/O Models)，而在人與人之間的協作，其實也有一模一樣的現象。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: SQA 面試題目</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0224-interview-sqa/</link>
      <pubDate>Sun, 24 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0224-interview-sqa/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210807880992497&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210807880992497&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上週 SRE 聚會聊到面試考題，分享我上一個工作 (SQA Manager, 2012~2015) 的面試考題。。。面試角色有兩種： SQA、SDET (Java)，共同考題：英文閱讀&lt;/p&gt;
&lt;p&gt;難易度，我個人評分是 2/5 (5 最難)&lt;/p&gt;
&lt;p&gt;資科、資工畢業的，應該九成輕鬆答對。然後，不要懷疑，這是我認定 QA 該具備的基本能力。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 架構與錄音介面</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0224-queue-in-muisc-production/</link>
      <pubDate>Sun, 24 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0224-queue-in-muisc-production/</guid>
      <description>
        
        
        &lt;h2 id=&#34;0824&#34;&gt;02/24: &lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210808014435833&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210808014435833&lt;/a&gt;
08/24: &lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10211752258481344&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10211752258481344&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上週跟朋友喇賽，聊到做音樂的一些概念，與系統架構 (Queue) 的對照。&lt;/p&gt;
&lt;p&gt;做音樂時，需要 #錄音介面，專有名詞稱為 Sound Interface，主要有兩個目的：處理數位與類比訊號的轉換，一班稱為 A/D、D/A。DSP 晶片越強大，處理速度就越快。&lt;/p&gt;
&lt;p&gt;大家要知道一件事情，音樂是時間藝術，換言之，製作音樂（通常是編曲、混音）過程中，聲音的產生是需要即時性的，否則會讓人有延遲感 (Delay)，編曲、錄音過程會很卡。&lt;/p&gt;
&lt;p&gt;什麼叫做 #即時？50ms 叫即時？1ms 叫即時？其實，人類感覺不出來延遲，就叫做即時。但是每個人感覺不一樣，受過訓練的樂手超過 20ms 就感覺得出來，沒訓練過的一班人可能 70ms 都還沒感覺。&lt;/p&gt;
&lt;p&gt;做音樂過程，會在鍵盤上（Keyboard，一般稱為 Controller，可以是鍵盤、電子鼓、DJ 控制器）輸入訊號，透過 MIDI Protocal 產生 MIDI Message 給音源。詳細的流程參閱我的整理文章 &lt;a href=&#34;http://rickmidi.blogspot.com/2011/09/concepts-of-music-technology.html&#34;&gt;1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;音源產生聲音方式有兩種：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;#取樣播放：也就是播放錄好的聲音，例如把中央 A 錄起來，然後讀出來播放，吃的是 I/O 與記憶體。&lt;/li&gt;
&lt;li&gt;#合成運算：也就是合成器，專有名詞 #Synthesizer 。主要適用 #振盪器 (OSC, LFO, HFO) 加上波形 #產生器 (正玄波、方波、三角波) ，還有 #濾波器 (Filter) 合成的聲音，這吃的是電腦運算，也就是 CPU。用電腦科學來講，就是一種演算法，最有名的就是 #史丹佛大學 的 #FM &lt;a href=&#34;https://digilog.tw/posts/421&#34;&gt;2&lt;/a&gt; 合成器技術，後來賣給 YAMAHA。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果是硬體處理，則是 DSP 直接運算處理。&lt;/p&gt;
&lt;p&gt;附圖是我的 Sound Interface 透過電腦當運算單元的設定畫面，在 Logic Pro 可以看到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sample Rate 越高，Latency 也越高&lt;/li&gt;
&lt;li&gt;Sample Rate 越低，Latency 也越低&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這就跟 架構的 Queue 一樣，存越久的 Message，代表處理時間可能越久，反應速度越慢。反之亦然。&lt;/p&gt;
&lt;hr&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 好軟體</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0220-good-software/</link>
      <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0220-good-software/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210784802695554&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210784802695554&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我們常常希望軟體工程師可以開發出好軟體。&lt;/p&gt;
&lt;p&gt;不過我覺得要先想幾個問題：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你覺得怎樣算是 #好軟體？&lt;/li&gt;
&lt;li&gt;你怎麼樣 #使用 一個軟體？&lt;/li&gt;
&lt;li&gt;你怎麼樣 #選擇 軟體？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;學樂器過程，除了學技巧、學樂理、練歌曲，更重要的是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你覺得怎樣算是 #好音樂？&lt;/li&gt;
&lt;li&gt;你怎樣 #欣賞 一首歌？&lt;/li&gt;
&lt;li&gt;你怎麼 #選擇 音樂？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;同樣的，廚師有好有壞，但是也需要想這些問題：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你覺得怎樣才是 #好料理？&lt;/li&gt;
&lt;li&gt;你怎麼 #品嚐 一道料理？&lt;/li&gt;
&lt;li&gt;你怎樣 #選擇 料理？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;再一個例子，小說家也會需要想這些：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你覺得怎樣才是 #好的小說？&lt;/li&gt;
&lt;li&gt;你怎麼 #閱讀 一部小說？&lt;/li&gt;
&lt;li&gt;你怎樣 #選擇 小說？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其他領域可以自己延伸、舉例，像是車、房子、地區、環境、民生必須、穿著、 &amp;hellip;.&lt;/p&gt;
&lt;p&gt;回到第一個問題，怎樣的軟體是 #好軟體？你用過哪些軟體覺得是好，為什麼？&lt;/p&gt;
&lt;p&gt;然後回到最開始的，軟體工程師要怎樣才能寫出好軟體？&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 看狀況，Context</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0220/</link>
      <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0220/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/photo.php?fbid=10210784715333370&amp;amp;set=a.4018937451224&amp;amp;type=3&amp;amp;theater&#34;&gt;https://www.facebook.com/photo.php?fbid=10210784715333370&amp;amp;set=a.4018937451224&amp;amp;type=3&amp;amp;theater&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;截圖文章的主軸是談 #代碼精進之路，內容是以工程角度看待效能、架構、品質與 #敏捷開發 等事情。所以，不同角度的人，看待同一件事情，很習慣地會站在自己的立場說話。&lt;/p&gt;
&lt;p&gt;我個人的看法？恩，最近很常說類似的話：要看狀況。很多現象、解決方案、技術，沒有前提（也就是故事）的討論，是沒意義的，而且很容易起衝突。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在我不了解你的背景故事前提，解決方案與技術都只是參考&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;架構、效能、品質問題，放在創業前期：市場驗證階段（燒錢），談這些東西可能會被白眼，所以通常會找高手直接讓這些『任務』Built-in 在裡面，不過實際做過的人都知道：這要時間，這要高手（不是找高手了？）、這坑很多。。。。&lt;/p&gt;
&lt;p&gt;而在企業發展的成長期，這些題目絕對是關鍵，是否能夠轉大人的關鍵點，所以這個時期的老闆魄力與決斷力會決定這家企業的生死存亡，換言之，轉不過去，很快地就會被外面追趕上來，或者自己內部就炸鍋了。&lt;/p&gt;
&lt;p&gt;上述兩個例子的『企業的階段狀況』，就是我說的前提與背景。&lt;/p&gt;
&lt;p&gt;文章的內容我是認同的，但是沒有前提背景。而實際的狀況是：你很難找到一個品質足夠的團隊來執行文中提到的任務，因為大部分（經驗值）的需求，本身是沒品質的，沒品質的需求後面的工程能有多少品質？&lt;/p&gt;
&lt;p&gt;談怎樣的東西，要看作者的背景 [1]。所以有時候看文章、聽演講要先瞭解作者的背景，還有立場，有時候內容只是見人說人話，見鬼說鬼話，要自己有判斷力。&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://rickhw.github.io/2017/09/14/SoftwareEngineering/Software-Development-Lifecycle/&#34;&gt;https://rickhw.github.io/2017/09/14/SoftwareEngineering/Software-Development-Lifecycle/&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 管理者的軟體工程</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0219-software-engineering/</link>
      <pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0219-software-engineering/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210776186440153&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210776186440153&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;撇開中美貿易戰、華為資安疑慮，以經營企業來看，一般企業上位者、管理者很少懂「#軟體工程」，更別提實踐。&lt;/p&gt;
&lt;p&gt;而這封內部信件的標題：『全面提升軟體工程能力與實踐，打造可信的高品質產品』，能發這樣的信，具體說軟體工程與實踐，具體的產品品質信念，文中有給工程師的、有架構的觀點、有務實的品質實踐、規範，明確公司目標與方向，而且不是教調是的八古文。&lt;/p&gt;
&lt;p&gt;摘要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们要转变观念，追求打造可信的高质量产品，不仅仅是功能、特性的高质量，也包括产品开发到交付过程的高质量。&lt;/li&gt;
&lt;li&gt;我们要从最基础的编码质量做起，视高质量代码为尊严和个人声誉。&lt;/li&gt;
&lt;li&gt;我们要深刻理解架构的核心要素，基于可信导向来进行架构与设计。&lt;/li&gt;
&lt;li&gt;我们要重构腐化的架构及不符合软件工程规范和质量要求的历史代码。&lt;/li&gt;
&lt;li&gt;我们要深入钻研软件技术，尤其是安全技术。&lt;/li&gt;
&lt;li&gt;我们要遵守过程的一致性。&lt;/li&gt;
&lt;li&gt;为此，我们要改变行为习惯，追求精品。&lt;/li&gt;
&lt;li&gt;更为重要的是，我们将通过变革形成一套适应上述变化的流程、组织与考核机制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;——&lt;/p&gt;
&lt;p&gt;類似的，Amazon 貝佐斯的內部信件也是類似的：Jeff Bezos’ Mandate: Amazon and Web Services [1] 提到的架構規範 [2] 其實是類似的。&lt;/p&gt;
&lt;p&gt;熟悉 AWS Architecture 概念的人，一眼就能看出華為這篇架構規範提到的蓋念，跟 Well-Architected [3] 很像。&lt;/p&gt;
&lt;p&gt;台灣的企業，有哪個老闆有這樣的眼界的？&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&#34;http://jesusgilhernandez.com/2012/10/18/jeff-bezos-mandate-amazon-and-web-services/&#34;&gt;http://jesusgilhernandez.com/2012/10/18/jeff-bezos-mandate-amazon-and-web-services/&lt;/a&gt;
[2] &lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210210201970895&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210210201970895&lt;/a&gt;
[3] &lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10209650652782515&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10209650652782515&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 能量轉換</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0218-transformation/</link>
      <pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0218-transformation/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210773944264100&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210773944264100&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;三個 #轉換 的例子&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;視覺
1-1. 拍照片：光影 (頻率) -&amp;gt; 鏡頭 (類比) -&amp;gt; 感光元件 (A/D) 轉成數位 -&amp;gt; 儲存 (Storage)
1-2. 看照片：存在 Storage -&amp;gt; 讀取 -&amp;gt; 透過 D/A 轉換 -&amp;gt; 面板反應成像 -&amp;gt; 發光&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;聽覺
2-1. 錄音：聲音 (頻率) &amp;ndash;&amp;gt; 收音 (類比) -&amp;gt; 感應線圈 -&amp;gt; 訊號轉換 (A/D) -&amp;gt; 轉成數位訊號 (Digital Audio) -&amp;gt; 儲存 (Storage)
2-2. 放音：儲存 &amp;ndash;&amp;gt; 讀取 &amp;ndash;&amp;gt; Digital Audio 資料送給  A/D 轉換器 -&amp;gt; 送給喇叭 -&amp;gt; 發出聲音&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;溝通
3-1. 聽講：嘴巴發聲 -&amp;gt;  空氣 -&amp;gt; 耳朵收音 -&amp;gt; 聽到 (聲音轉成訊號) -&amp;gt; 腦袋轉換 -&amp;gt; 理解
3-2. 演說：腦袋裡的想法 &amp;ndash;&amp;gt; 轉換語言 -&amp;gt; 嘴巴發聲 -&amp;gt; 傳到空氣&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有啥關係？
其實我也不知道 XDD&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 部署測試</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0218_software-test/</link>
      <pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0218_software-test/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210774369514731&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210774369514731&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我在 #軟體測試階段 [2] 介紹中，提到一個概念: Deployment Test，也就是那些部署程式自身的測試。在另一篇文章 介紹 #CodeDeploy [3] 時，也點出類似概念：#Pipeline 的 scripts 必須可以進 Git 版控、可以在開發者本機做測試、驗證，而不是被工具綁死。&lt;/p&gt;
&lt;p&gt;而這個影片 [1] (by AWS) 的標題是同一個概念：Pipelines Should be Managed as Code: How Do You Test Your Pipeline Changes?&lt;/p&gt;
&lt;p&gt;同樣的概念，我在 #軟體開發生命週期 (Software Development Lifecycle, SDLC) [4] 一文的整理中，在 2016 年的版本中，提到 Pipeline 橫跨整個開發週期的想法，同時包含了 Provisioning、Infra as Code、Orchestration 等實務的想法。&lt;/p&gt;
&lt;p&gt;其他類似想法的整理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2018/11/27 [5]&lt;/li&gt;
&lt;li&gt;2018/11/07 [6]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這些差不多就是在說明 #PipelineAsCode 的想法，除了 asCode 這些想法，其實還有一個關鍵點，也是很多人會犯錯的坑：AsCode 之後 Pipeline 所有的 Job 必須可以個別獨立執行，或者由不同角色，個別決定如何執行。否則就會陷入這樣的陷阱：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;飛機飛行都自動化了，但出狀況的時候，機長廣播跟大家說，他不會手動飛行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這概念，大概就是一般設計 #批次程序 時注意的，基本的原則：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有的程序可以獨立執行，通常是 command line&lt;/li&gt;
&lt;li&gt;程序可以透過 stdin, stdout 串起來，也就是 pipe&lt;/li&gt;
&lt;li&gt;程序跟程序之間的資源，不會相互干擾&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;類似的應用，在很多地方:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;電商的後台交易批次程序&lt;/li&gt;
&lt;li&gt;銀行批次作業&lt;/li&gt;
&lt;li&gt;軟體自動化測試程序&lt;/li&gt;
&lt;li&gt;維運系統的批次程序&lt;/li&gt;
&lt;li&gt;非同步的系統功能 (非同步都是這種)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#DevOps&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://www.youtube.com/watch?v=paiaoRlJZTc&#34;&gt;https://www.youtube.com/watch?v=paiaoRlJZTc&lt;/a&gt;
[2] &lt;a href=&#34;https://rickhw.github.io/2017/03/18/SQA/Stages-In-Software-Testing/&#34;&gt;https://rickhw.github.io/2017/03/18/SQA/Stages-In-Software-Testing/&lt;/a&gt;
[3] &lt;a href=&#34;https://rickhw.github.io/2017/08/13/AWS/Study-Notes-CodeDeploy-Preparation/&#34;&gt;https://rickhw.github.io/2017/08/13/AWS/Study-Notes-CodeDeploy-Preparation/&lt;/a&gt;
[4] &lt;a href=&#34;https://rickhw.github.io/2017/09/14/SoftwareEngineering/Software-Development-Lifecycle/&#34;&gt;https://rickhw.github.io/2017/09/14/SoftwareEngineering/Software-Development-Lifecycle/&lt;/a&gt;
[5] &lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210320994260633&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210320994260633&lt;/a&gt;
[6] &lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210371671407530&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210371671407530&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: VSTS</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0217-vsts/</link>
      <pubDate>Sun, 17 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0217-vsts/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/photo.php?fbid=10210768371004772&amp;amp;set=a.1559674051176&amp;amp;type=3&#34;&gt;https://www.facebook.com/photo.php?fbid=10210768371004772&amp;amp;set=a.1559674051176&amp;amp;type=3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure DevOps (#VSTS) 每個 Project 左側功能區塊，分成幾個部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;#Summary: 也就是看到全貌，包含 Dashboard、Wiki 部分&lt;/li&gt;
&lt;li&gt;#Boards: 也就是執行狀況 (Execution)，內容以看板呈現，分成 Work Items, Boards, Sprint, Query 等形式呈現。其實重點在於如何 #執行，有哪些項目、哪一些階段、執行狀況、客制的查詢 等&lt;/li&gt;
&lt;li&gt;#Repository: 是開發過程原始碼的分支管理 (Branches)，分成 Source, Commit, Branches, Pushes, Tags, Pull Request .. 等&lt;/li&gt;
&lt;li&gt;#Pipeline: 是串接 CI/CD 的控制單元，也是一般 DevOps 在討論 #自動化 的重要區塊, 有 Builds, Release, Libraries,&lt;/li&gt;
&lt;li&gt;#Test: 測試執行紀錄，分成 Plan, Run, Load Test 三塊.&lt;/li&gt;
&lt;li&gt;#Artifacts: 產出物管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;依照職業角色的對應，我這樣整理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Summary, Board：所有人&lt;/li&gt;
&lt;li&gt;Boards：Managers / PMs / POs / 所有人&lt;/li&gt;
&lt;li&gt;Repository: Developers&lt;/li&gt;
&lt;li&gt;Pipeline: DevOps / Ops / SRE&lt;/li&gt;
&lt;li&gt;Test: Testers / QAs / QE / SDET&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本上，這些概念可以免強對應到我的 SDLC [1] 裡提到的四個 #角色 與 #階段，也就是 Plan, Execution, Acceptance, Go Live.&lt;/p&gt;
&lt;p&gt;實際上還是有少，例如，Plan 功能太弱，沒有 User Story Mapping；執行過程的通知功能很弱，不容易通知相關人。維運功能太少，沒有部署後的 Dashboard，沒有 E2E 的 Feedback 管理 (類似於客戶關係管理)、沒有系統狀況檢核 (Health Dashboard) &amp;hellip;&lt;/p&gt;
&lt;p&gt;不過相較於其他協作系統，在 #開發階段 ，算是相對完整的。&lt;/p&gt;
&lt;p&gt;我理想的協作系統：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;各個層級的 View: 高階主管可以看到年度計畫 (附圖)&lt;/li&gt;
&lt;li&gt;執行面的管理者可以精準掌握年度計畫的同步資訊&lt;/li&gt;
&lt;li&gt;一線執行者 (PO/Dev/QA/Ops)，可以知道年度計畫的變動&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://rickhw.github.io/2017/09/14/SoftwareEngineering/Software-Development-Lifecycle/&#34;&gt;https://rickhw.github.io/2017/09/14/SoftwareEngineering/Software-Development-Lifecycle/&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 紀律</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0216-lead/</link>
      <pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0216-lead/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210763597605440&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210763597605440&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#電影 Hunter Killer&lt;/p&gt;
&lt;p&gt;領導者：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空降主管，如何服眾：紀律、目標&lt;/li&gt;
&lt;li&gt;指令精準，沒有遲疑&lt;/li&gt;
&lt;li&gt;相信下屬，充分授權&lt;/li&gt;
&lt;li&gt;危機處理：藝高、膽大、心細&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不錯看，很精彩，張力夠大，
也很戲劇化，雖然滿容易猜到劇本的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://arielhsu.tw/hunter-killer/&#34;&gt;http://arielhsu.tw/hunter-killer/&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: Auto Ops？</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0213-auto-ops/</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0213-auto-ops/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210748500068011&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210748500068011&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;老話一句：當飛機出問題時，機師說沒自動駕駛，他不會降落。&lt;/p&gt;
&lt;p&gt;把「飛機」換成「系統」，把「機師」換「工程師」。&lt;/p&gt;
&lt;p&gt;再說一次：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自動化不是什麼都不用知道&lt;/li&gt;
&lt;li&gt;軟體自動化 XXX [1] 的難度遠比一班業務功能複雜&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我強烈反對為自動而自動。
爛的扣，只會製造更多工作機會。
自動化是給有程度的工程師做的事情。&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://rickhw.github.io/2017/08/30/DevOps/Automation-or-Process/&#34;&gt;https://rickhw.github.io/2017/08/30/DevOps/Automation-or-Process/&lt;/a&gt;
[2] &lt;a href=&#34;https://gushi.tw/autopilot-and-pilot/&#34;&gt;https://gushi.tw/autopilot-and-pilot/&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: Design Pattern</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0213_design-pattern/</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0213_design-pattern/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210748760634525&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210748760634525&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#隨筆&lt;/p&gt;
&lt;p&gt;#DesignPattern 存在的目的，不是為了掉書袋、耍專業的傲慢，而是讓工程師跟工程師之間、開發者跟開發者之間，能夠 #高效溝通。&lt;/p&gt;
&lt;p&gt;叫兩個不同語言背景的工程師 (Node.js, GoLang) 說明 Observer Pattern，結果應該是一樣的。因為 Design Pattern 講的是抽象觀念，不是實作技術。透過直接使用 Pattern 的溝通會更效率化溝通。&lt;/p&gt;
&lt;p&gt;Design Pattern 是溝通的 #術語，也是專業的體現。如果不知道 Observer Pattern 是啥鬼，那應該要知道回去好好用功，或者好好請教有經驗的人。&lt;/p&gt;
&lt;p&gt;Design Pattern 是工程師之間的抽象介面術語，是為了高效溝通。而組織跟組織之間的溝通也是一樣，溝通的東西也是抽象介面，而不是自己的技術生態圈。如果管理階層都無法在抽象介面之上，建立良好的抽象協議，那麼所有的溝通實際上是沒意義的。&lt;/p&gt;
&lt;p&gt;另外 Design Pattern 不僅止於工程師之間的溝通術語，他的本質與 #系統架構 是一模一樣的概念，換言之，在 Design Pattern 中各個討論 Pattern 的方式與結構，同樣可以套用在溝通 #系統架構 上，同樣的這個溝通也是抽象介面，不談實際的技術實踐。&lt;/p&gt;
&lt;p&gt;所以：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;工程師跟工程師之間的高效溝通&lt;/li&gt;
&lt;li&gt;系統架構的高效分析&lt;/li&gt;
&lt;li&gt;組織跨團隊的高校溝通&lt;/li&gt;
&lt;li&gt;組織與系統的對應與高效溝通 (#康威定律)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;這些本質上都類似，這些都考驗 #抽象化（唬爛）能力。另外可以再加上 OOP 來論述。&lt;/p&gt;
&lt;p&gt;今天聽完外部產品經理分享的想法整理，其實這個分享有很多點在我的這篇文章 [1] 裡都有。&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://rickhw.github.io/2017/11/26/Thinking-in-Essence/&#34;&gt;https://rickhw.github.io/2017/11/26/Thinking-in-Essence/&lt;/a&gt;
&lt;a href=&#34;https://openhome.cc/Gossip/StudyGossip/abstractThinking.html&#34;&gt;https://openhome.cc/Gossip/StudyGossip/abstractThinking.html&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 自動化？程序化？</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0213-autotest/</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0213-autotest/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210748626711177&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210748626711177&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;偶爾要提一下。&lt;/p&gt;
&lt;p&gt;基本上，大部分現在軟體開發中的『自動化』（特別是 #自動化測試）本質上都只是『程序化』，通常這些『程式』可用的生命週期不會超過一年，實際上維護的成本，會遠比自身帶來的效益大過很多。&lt;/p&gt;
&lt;p&gt;#自動化 與 #程序化 的差異：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序化：照本宣科地做事情&lt;/li&gt;
&lt;li&gt;自動化：除了做事情，還會依據 Feedback 的結果，自我修正與調整。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這是兩種層次的課題，沒有辦法針對 Feedback 做出 Action  的，都只是一堆程序個體。&lt;/p&gt;
&lt;p&gt;補充：現在很多人在做的 CI/CD Pipeline，本質上都只是一堆串程序的作業而已，談不上『自動』。&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://rickhw.github.io/2017/11/12/DevOps/Gossip-Automation/&#34;&gt;https://rickhw.github.io/2017/11/12/DevOps/Gossip-Automation/&lt;/a&gt;
[2] &lt;a href=&#34;https://rickhw.github.io/2017/12/21/DevOps/What-is-Automation/&#34;&gt;https://rickhw.github.io/2017/12/21/DevOps/What-is-Automation/&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 規劃網路 - AWS VPC</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0212-vpc/</link>
      <pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0212-vpc/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210742817845959&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210742817845959&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS 每個新服務推出來，過一段時間 VPC 就要弄一個東西來解決這些服務之間串接的問題，也就是服務跟服務之間如何溝通，這段 Network Topologies 本質上就是在處理 Routing，也就是我說過的問題：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;學習 AWS 如果不懂 VPC 以及 Routing，就等於不會用 AWS &lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10208308848518247&#34;&gt;1&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這問題就像是城市發展，大樓蓋好了，但是主要公路沒規劃，從台北到桃園，只能先從松山機場坐飛機，飛到日本，然後再回到桃園機場降落。&lt;/p&gt;
&lt;p&gt;過一陣子才發現機票很貴，發現，應該在台北桃園蓋一條高速公路就可以。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;大部分的開發者，負責蓋大樓，但不負責蓋馬路。更不用提規劃馬路要知道 RFC 1918 這種基礎知識。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;蓋了大樓，要做道路規劃，主幹線、支線、單線、雙線、高速線道、人行道，規劃好再做好交通管制閘道，像：紅綠燈、斑馬線、限速。。。這是都市規劃。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我還沒提到簽證、身份驗證、ETC 這種跟 Auth 有關的東西。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你的架構如果無法看到問題，錢會不知道怎麼不見的，資安問題會莫名其妙地跑出來。&lt;/p&gt;
&lt;p&gt;不要覺得換一個雲就沒這問題，實際上問題都一樣，只是有沒有真的去面對而已。&lt;/p&gt;
&lt;p&gt;組織每多一個團隊，管理者就要解決這個團隊與其他團隊溝通的問題。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: Jsonnet</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0211/</link>
      <pubDate>Mon, 11 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0211/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210736739654008&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210736739654008&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#Jsonnet &lt;a href=&#34;https://jsonnet.org/&#34;&gt;0&lt;/a&gt; 是 json 的超集 (superset) 專案，是個資料結構樣板語言 (Data Templating Language)，增強了 json 的弱點，從 Feature 來看，算是個 DSL (Domain-specific Language)。&lt;/p&gt;
&lt;p&gt;底下是他的 Features &lt;a href=&#34;https://jsonnet.org/learning/tutorial.html&#34;&gt;1&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Syntax (語法): 支援 comment, 變數 (範圍), namespace&lt;/li&gt;
&lt;li&gt;Variables (變數): local,&lt;/li&gt;
&lt;li&gt;References (變數參考): self. , $refers, [&amp;lsquo;field&amp;rsquo;] &amp;hellip;&lt;/li&gt;
&lt;li&gt;Arithmetic (運算): 支援 floating, bitwise, boolean logic, ==,  &amp;hellip; 等常見運算&lt;/li&gt;
&lt;li&gt;Functions: 可以寫函式，有標準函式庫 &lt;a href=&#34;https://jsonnet.org/ref/stdlib.html&#34;&gt;2&lt;/a&gt; &amp;hellip;&lt;/li&gt;
&lt;li&gt;Conditionals (條件式判斷): if / else / then&lt;/li&gt;
&lt;li&gt;Computed Field Names: 物件可以當作資料結構處理&lt;/li&gt;
&lt;li&gt;Array and Object Comprehension: 支援類似 Python 的 list 走訪語法，直接展開 Array Element.&lt;/li&gt;
&lt;li&gt;Imports: 支援 import text, json, .libsonnet&lt;/li&gt;
&lt;li&gt;Errors: 支援 assert&lt;/li&gt;
&lt;li&gt;Parameterize Entire Config: 參數化整個配置，分 外部變數和最上層參數&lt;/li&gt;
&lt;li&gt;Object-Orientation (物件導向) &amp;hellip;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;jsonnet-這個字由-json--sonnet-組成唸作-jay-sonnet-由-google-一群宅宅於-2014-年發起&#34;&gt;jsonnet 這個字由 json + sonnet 組成，唸作 &amp;ldquo;jay sonnet&amp;rdquo;. 由 Google 一群宅宅於 2014 年發起。&lt;/h2&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 自我？自由意識存在？</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0206-draft/</link>
      <pubDate>Wed, 06 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0206-draft/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210706794385395&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210706794385395&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;色列作家 #尤瓦爾赫拉利 的著作：《#未來簡史（台灣書名：#人類大命運）》談到的 #自由主義 的三個假設前提：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我有一個不可分割的自我&lt;/li&gt;
&lt;li&gt;這個自我是自由的（即自由意識是存在的）&lt;/li&gt;
&lt;li&gt;沒有人比我更了解自我&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;這三個假設，在書裡提到已經都被推翻，換言之，未來將不存在自由主義，未來只會剩下三種人：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;無用的人（已經被機器取代的人）&lt;/li&gt;
&lt;li&gt;沒有自主的人（完全透過演算法決策的人）&lt;/li&gt;
&lt;li&gt;神人 （寫演算法的人）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;#自由意識&lt;/p&gt;
&lt;h2 id=&#34;美麗新世界&#34;&gt;美麗新世界&lt;/h2&gt;
&lt;p&gt;讀到這裡，想起反烏托邦小說《#美麗新世界》裡面透過生物科技，在胚胎時期，透過修改 DNA 把人類分成四種等級：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Alpha:&lt;/li&gt;
&lt;li&gt;Beta:&lt;/li&gt;
&lt;li&gt;Gamma:&lt;/li&gt;
&lt;li&gt;Delta:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;這四種等級，Alpha 移走了現代人普遍的道德觀，例如小說中不存在家庭、夫妻、父母的『歷史概念』，允許自由性交、允許吸毒，一切人性的慾望，都可以獲得滿足。&lt;/p&gt;
&lt;p&gt;當然要滿足這些慾望，也要先打破一些生理限制，例如『自由性交』，小說中的人的 DNA 是被修改過的，經過基因工程誕生的人，是沒有生殖、生育能力的。&lt;/p&gt;
&lt;p&gt;Delta 是最低等的人，在受精卵胚胎成形的時候，透過減少氧氣的方式，降低智商，提升體力，這些人成人後負責粗重的工作。但同時也會滿足他們各方面的慾望，例如成就感、慾望、甚至是毒品。&lt;/p&gt;
&lt;p&gt;赫拉利 另一本著名著作：人類大歷史 （或者人類簡史）&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;小時候看小叮噹&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;銀河飛龍&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;當不需要工作、不缺糧食、不需要，
那麼生活的目的是什麼？&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 軟體測試？</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0119_test-concept/</link>
      <pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0119_test-concept/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210605483812694&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210605483812694&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;說明一些關於 #軟體測試的 觀念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能 (Functional)、整合 (Integration)、回歸 (Regression) 、效能 (Performance) 是不同的目標、目的 (請注意次序性)&lt;/li&gt;
&lt;li&gt;測試這些事情所具備的條件、資源、環境是不一樣的&lt;/li&gt;
&lt;li&gt;定義參閱 [1]&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;舉例&#34;&gt;舉例&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;#功能：處理一張圖檔的縮圖處理 - 重點在於功能可否運作&lt;/li&gt;
&lt;li&gt;#整合：處理一張圖縮圖 + 浮水印 + 改檔名 - 幾個功能放在一起運作邏輯&lt;/li&gt;
&lt;li&gt;#回歸：1) 重新驗證曾經出現的 bug/detect, 2)重跑功能 + 整合所有的 test cases.&lt;/li&gt;
&lt;li&gt;#效能：處理一萬張縮圖處理 - 重點在於完成所需的資源、時間&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;優先序：功能 &amp;gt; 整合 &amp;gt; 回歸 &amp;gt; 效能&lt;/p&gt;
&lt;h1 id=&#34;觀察到的現象&#34;&gt;觀察到的現象&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;很多人會把 功能 跟 效能 擺在一起測試，混為一談，特別是在規劃測試環境時，這兩個不能混為一談，會沒完沒了。&lt;/li&gt;
&lt;li&gt;測試效能的前提是：功能能夠順利通過驗證。如果功能測試的可測性有問題，效能測試意義就不大。&lt;/li&gt;
&lt;li&gt;#整合測試 的排列組合無窮多，必須有使用者場景 (User Scenario) 支撐，參見 [3] 的案例分析&lt;/li&gt;
&lt;li&gt;測試 也是 #解偶，不是啥東西都要扯在一起才能測。想想 AWS 怎麼測 EC2、VPC、DynamoDB &amp;hellip;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;軟體測試的二分法&#34;&gt;軟體測試的二分法&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;功能驗證 (FVT)：#假設功能還沒好，目的是確認商業功能正確性，像是邏輯完整性、資料正確性、驗證與錯誤處理 … 等，強調功能本身的 #內聚力。&lt;/li&gt;
&lt;li&gt;系統驗證 (SVT)：#假設功能都好了，增加 外在環境因素 之後，把這些 功能 放到不同的環境會有什麼問題？強調外在 #耦合性、真實世界 的情境。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;相關文章&#34;&gt;相關文章&lt;/h1&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://rickhw.github.io/2017/03/18/SQA/Stages-In-Software-Testing/&#34;&gt;https://rickhw.github.io/2017/03/18/SQA/Stages-In-Software-Testing/&lt;/a&gt;
[2] &lt;a href=&#34;https://rickhw.github.io/2018/03/18/SQA/Gossip-System-Testing/&#34;&gt;https://rickhw.github.io/2018/03/18/SQA/Gossip-System-Testing/&lt;/a&gt;
[3] &lt;a href=&#34;https://rickhw.github.io/2017/12/03/SQA/Regression-Test-Is-Tough/&#34;&gt;https://rickhw.github.io/2017/12/03/SQA/Regression-Test-Is-Tough/&lt;/a&gt;
[4] &lt;a href=&#34;https://rickhw.github.io/2018/07/22/SQA/Performance-Test/&#34;&gt;https://rickhw.github.io/2018/07/22/SQA/Performance-Test/&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 語言學習跟軟體開發</title>
      <link>https://www.gtcafe.com/portal/itlds/2018/0924/</link>
      <pubDate>Mon, 24 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2018/0924/</guid>
      <description>
        
        
        &lt;p&gt;Source: &lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/pfbid07mW2UnPngpEtCjYffckf9JYtf5GY2MX9hJBre88rUaEuVuAbBSskTzrtAWi5DLVRl&#34;&gt;2018/09/24&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這是本來規劃要學的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sprint1: How?&lt;/li&gt;
&lt;li&gt;Sprint2: How are you?&lt;/li&gt;
&lt;li&gt;Sprint3: How are you today?&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;先學個關鍵字：How
然後馬上拿去用，
抓個路人問：How？How？How？How？How？&lt;/p&gt;
&lt;p&gt;聽不懂，再學第二句：How are you?
然後馬上拿去用，抓個人說。。。
馬上聽的懂了！&lt;/p&gt;
&lt;p&gt;然後加上時間：How are you today?
這是個完整的句子，
就像完整的產品，可以上線了。
終於上線了，人爽心情好，&lt;/p&gt;
&lt;p&gt;加個形容詞：How are you fxxking today?
人咩，總是會有情緒咩～～&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;軟體開發其實跟這很像，不過常常卻是這樣：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sprint1 看到：How?&lt;/li&gt;
&lt;li&gt;Sprint2 看到：How are you?&lt;/li&gt;
&lt;li&gt;Sprint3 看到：_________you today?     (衝啦，快上線啦，How 是啥東西？能吃嗎？)&lt;/li&gt;
&lt;li&gt;Sprint4 看到：_____________fxxking today?   (衝衝衝)&lt;/li&gt;
&lt;li&gt;Sprint5 看到：_____________fxxking? (&amp;hellip;&amp;hellip;&amp;hellip;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;恩，全貌只剩下 fxxking &amp;hellip;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最近有篇 #天龍八部 類比軟體開發的說明，其實是類似的。。。不過考慮很多人沒讀過 #天龍八部 原著，也不知道創作過程，金庸出差、請倪匡代筆的過程。。。用比較簡單的方式說明類似的問題。。。&lt;/p&gt;
&lt;p&gt;恩，凡走過，請不要忘記。看文也記得爬文，了解開發過程的原由、因果、來龍去脈 &amp;hellip;.  看到宏觀的整理。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;產品功能會隨時間累加、測試壓力也是累加、部署的複雜度也是累加的、維運的難度與複雜度是指數上升的。所以 #回歸測試 的重要性，在後期（2y+) 後越來越重要。&lt;/p&gt;
&lt;p&gt;產品理想的情境，在過程中應該持續的 #去蕪存菁 ，也就是不是只有增加功能，同時也有刪去功能。能真的如此，系統會越來越強壯，越來越穩定。
不過實際的都是，只有加，沒有減，更沒時間重構。所以系統只有越來越肥大，而且不知道肥在哪。最後很難看到全貌，只會看到 fxxking &amp;hellip;
因為越來越大，但還是要如期交付，所以很多妖魔鬼怪的方法一窩蜂地跑出來，例如：沒有意義的 #自動化測試 ，對，我要再次強調：#沒有意義的自動化測試！ 問題源頭不在自動化，也不在測試，而是沒有回去 去蕪存菁！ 源頭是是垃圾，後面做的再好，都是只是很漂亮的垃圾。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: </title>
      <link>https://www.gtcafe.com/portal/itlds/2019/blogged__0316-jinyoung2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/blogged__0316-jinyoung2/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210905994685278&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210905994685278&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#倚天屠龍記 2019 年版正在播放中，進行到劇情中最精彩的 #大事件： #六大派圍攻光明頂&lt;/p&gt;
&lt;p&gt;整理我看過的電視劇版本，與原著比較，後面的數字是電視劇 六大派圍攻光明頂 的 影集數和實際劇情的時間：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=80acNFe3WEY&amp;amp;index=26&amp;amp;list=PLUz3zvlwsLgXd5qxaFXSk6l_1zujIm0ia&#34;&gt;1&lt;/a&gt; 1994 馬景濤、葉童: 26-27, 15m&lt;/li&gt;
&lt;li&gt;[2] 2001 吳啟華、黎姿, 找不到了&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=qr89CgWprPo&amp;amp;list=PLi9UVZfmqM6HOVMJAY1q8kL10nRnl1Puc&amp;amp;index=15&#34;&gt;3&lt;/a&gt; 2003 蘇有朋、賈靜雯: 15 - 16 集, 30m&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=--D2LQENhw4&amp;amp;list=PLryjp4SwKTHWszxNjzLiQWhXF9MRZXCGX&amp;amp;index=18&#34;&gt;4&lt;/a&gt; 2009 鄧超、安以軒： 17 集, 20m&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Gvj5ZcoiMtw&#34;&gt;5&lt;/a&gt; 2019 曾舜晞、陳鈺琪, 20-21 集&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原著小說的時間序 [大概]&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;白眉鷹王被 武當三俠 車輪戰&lt;/li&gt;
&lt;li&gt;張無忌 vs 少林寺：圓音 龍爪手&lt;/li&gt;
&lt;li&gt;華山掌門 #鮮于通 與 蝴蝶谷醫仙 #胡青牛&lt;/li&gt;
&lt;li&gt;崆峒派 七傷拳&lt;/li&gt;
&lt;li&gt;反兩儀劍法&lt;/li&gt;
&lt;li&gt;華山 兩儀劍法&lt;/li&gt;
&lt;li&gt;峨眉 滅絕 vs 張無忌&lt;/li&gt;
&lt;li&gt;峨眉 周芷若 vs 張無忌&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;完整性來講， 2019 年版算是最完整詮釋的，整體的步調還不錯，不會太快，或者感覺想要省略什麼。張無忌出場前，也把白眉鷹王的絕望感、悲壯感、老當益壯的感覺表現出來，張無忌出場舉重若輕的擊敗對手、揭瘡疤 &amp;hellip; 等。&lt;/p&gt;
&lt;p&gt;電視劇的拍攝，往往有一個問題：想要討好觀眾，所以能省就省，很多原著中的劇情都省略了，或者隨便敷衍的拍過。有時候刻意用一推沒啥意義的特效，掩蓋劇情，或者很爛的佈景。&lt;/p&gt;
&lt;p&gt;2019 版，看到現在，整體來說，蠻對我的胃口的。幾個打到我的點的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;#音樂與配樂：主題曲是周華健的 #刀劍如夢 ，直接向 1994 年的版致敬，有歷史感，記憶感。配樂以西洋 #Epic 曲風居多，也就是管弦樂為主，中國傳統樂器較少，這點我覺得可以再觀察。&lt;/li&gt;
&lt;li&gt;#場景：針對光明頂的場景，場面夠大，有『總壇』的感覺，夠氣派，應該是歷來最棒的場景。&lt;/li&gt;
&lt;li&gt;#整體畫面：中國過去十年拍攝的古裝電視劇都有一個共同的問題：顏色太豔麗，沒有古氣。古代服裝也好，建築也好，實際上顏色不會太豔麗，所以如果呈現的太豔麗，反而很刻意，或者很現代，古裝戲很現代？&lt;/li&gt;
&lt;li&gt;#武打特效：同樣的問題，過去十年的電腦特效都太花俏，反而沒有傳統武術的內斂與樸實感，過多的是好萊屋的人工製品感。2019 年版的特效沒有太鋪張，武打動作算是中庸。&lt;/li&gt;
&lt;li&gt;#運鏡與剪接：有些武打動作，被鄉民或影評幹樵，一個動作用了七個鏡頭（張翠山自盡畫面），這點我認同，有點過頭。我個人也不太喜歡在觀影時，有太多的剪接，有時候視覺上滿累的。&lt;/li&gt;
&lt;li&gt;#演員選角與詮釋：這很主觀。好的是，女生的部分，是我的菜XDD，不管是造型還是裝扮，都算是我心裡覺得應該的。男性演員，有些角色的詮釋不太習慣，特別是楊逍，詮釋的太冷，比較像是黃藥師，沒有瀟灑自若、放到不羈的感覺。&lt;/li&gt;
&lt;li&gt;#段落起訖的張力：這段經典從白眉鷹王力戰六大派、一直到最後周芷若用倚天劍，刺傷張無忌，導致重傷、殷梨廷 與 楊不悔 之間的對話、張無忌與武當六俠相認，劇情張力與情感表現落差很大，實在是經典中的經典。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;恩，簡單記錄，觀看到現在的感覺，其他未來再來補充。&lt;/p&gt;
&lt;p&gt;#金庸&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: </title>
      <link>https://www.gtcafe.com/portal/itlds/2019/blogged__0330-end-of-q/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/blogged__0330-end-of-q/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210969925483508&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210969925483508&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;莫名其妙，好像什麼都沒做， 2019Q1 就過完了，從年前、年後，一直到現在，送走了好多人，吃了很多飯局，也約了好幾場卻沒吃到，一延、二延、三延 &amp;hellip; 然後就忘了。這過程心裡的感覺很複雜，愁悵感由然而生，想很多事情，正向的、反向的、自私的、大格局的，都想過。但從不想改變什麼，因為也改變不了什麼。&lt;/p&gt;
&lt;p&gt;來來去去、分分合合，本來就是職場的常態。在這樣的狀態之下，該做的還是要做，該忙的還是要忙，要面對的還是要面對。&lt;/p&gt;
&lt;p&gt;最近有多忙，忙到不知道自己在做啥。每天都一兩點睡，有時候會到四點，上班坐公車坐到睡著、下班常常是公車坐過頭，上班鬧鐘響了，像是個機器人穿衣服、刷牙、等公車、到公司、吃三角飯糰、泡咖啡、開會、開會、開會、開會、開會、開會、下班、讀書、找資料、學習、思考 &amp;hellip;.。&lt;/p&gt;
&lt;p&gt;讀了很多書、看了很多文章，很多想法怕流失，隨時都在紀錄想法，隨時都在發想、隨時都在思考下一步，隨時都希望可以幫助團隊成長，不要走冤枉路，但也在思考自己的不足、該持續補足的。&lt;/p&gt;
&lt;p&gt;想的速度，遠遠大於寫下來的速度，有時候還真的希望可以用腦袋直接寫文章，把想法透過意念的方式記錄下來，甚至直接寫成程式。&lt;/p&gt;
&lt;p&gt;認識很多高手，知道自己的不足，深刻體悟一個人的苗小，團隊與合作的重要。進與退，永遠是退者才有機會。天下武功，仁者服人。想想唯一能做的，不是把自己變成技術很厲害的、或者是造神運動，反而最重要的是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;建立連結、創造舞台、製造機會、成就團隊&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;回顧去年年底日記寫的目標與期許，到現在好像沒有真的做了什麼。有很多想做的，特別是想改變一些現況的想法，想幫助別人的想法、意念沒改變。雖然能力很有限，但總是想做些什麼事。&lt;/p&gt;
&lt;p&gt;雨天的夜，就像 Deep Purple 的經典曲 &amp;ldquo;Sometimes I Feel Like Screaming&amp;rdquo; &amp;hellip;.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
