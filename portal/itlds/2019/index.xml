<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GTCafe Studio – 2019</title>
    <link>https://www.gtcafe.com/portal/itlds/2019/</link>
    <description>Recent content in 2019 on GTCafe Studio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Fri, 06 Sep 2019 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="https://www.gtcafe.com/portal/itlds/2019/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Itlds: 你的系統架構</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0906/</link>
      <pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0906/</guid>
      <description>
        
        
        &lt;p&gt;你的系統架構&lt;/p&gt;
&lt;p&gt;很多人看不懂五線譜&lt;/p&gt;
&lt;p&gt;小提琴少一根弦&lt;/p&gt;
&lt;p&gt;鋼琴還沒調音，老闆問：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;鋼琴要調音？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;明天要去國家音樂廳演出&lt;/p&gt;
&lt;p&gt;鼓手還沒找到 吉他手當鼓手&lt;/p&gt;
&lt;p&gt;吉他手在交響樂團作啥？&lt;/p&gt;
&lt;p&gt;剛剛作曲打電話來說：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第十五到三四小節他重寫了，製作人要求的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;等一下寄原始檔給你&lt;/p&gt;
&lt;p&gt;他不知道&lt;/p&gt;
&lt;p&gt;你跟本沒工具可開檔&lt;/p&gt;
&lt;p&gt;然後 這天是星期五 星期一上台&lt;/p&gt;
&lt;p&gt;我到底在寫啥鬼&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0906.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/pfbid0BidiciQ2vG5AvQ2nnWbjTVSZ3eK1ExZnhGzhLUBWCyyPAVTAWsEdT47RdrDhZqnDl&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: Dev 和 Ops 誰有價值？</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/20190817/</link>
      <pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/20190817/</guid>
      <description>
        
        
        &lt;p&gt;跟朋友聊到這問題的看法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作曲 跟 演奏哪個有價值？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有點像二元論、雞生蛋蛋生雞的問題。&lt;/p&gt;
&lt;p&gt;作曲像生孩子，演奏是教育孩子。
作曲像創造生命，演奏授與靈魂。
作曲是 0 到 1，演奏是 1 - 100。
作曲是 developer, 編曲/演奏是 engineer [3]&lt;/p&gt;
&lt;p&gt;刻板映像：大部分的樂手瞧不起五月天
因為很芭樂，沒啥深度，也沒啥技術性
為了取悅而創作
就像很多開發者瞧不起 Windows
五月天就是寫給 80% 的人聽得懂的 [1]
Microsoft 就是為了搶下 80% 的市場
如此而已。&lt;/p&gt;
&lt;p&gt;寫歌這件事不難，寫出有共鳴的不容易 [1]
寫出來的歌是好是壞
有時候後天的包裝影響很大
#編曲 則是另一種包裝&lt;/p&gt;
&lt;p&gt;要賺錢，就要寫 80% 的人聽得懂的。
要表達自我，通常只有 20% 能接受。
閃靈這種黑死的風格，在台灣是很少人能接受的，
所以要賺錢，不會寫這種曲風。 (賺錢跟紅不紅不是絕對)
但是閃靈的歌 重新編曲成大家聽得懂的風格之後
接受度是很高的 像是 #暮沉武德殿 [2]&lt;/p&gt;
&lt;p&gt;我很常用 #詮釋 這個概念
樂手的工作，就是 詮釋 作曲者想表達的情緒
而作曲者則要用他的『工具』留下來，
讓樂手知道怎麼詮釋
所以樂譜上都會有很多 #表情 符號
不管是 fff, mf, 漸大漸小 &amp;hellip;. etc&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;同一個角色，都叫做郭靖、或者是張無忌
但是不同人飾演，就是有不同的味道、樣子
飾演就是一種對於角色的詮釋
創造角色的是金庸
金庸很重要，小說寫歷史
從歷史中寫小說，創造虛實融合的故事
但是讀歷史本身就是一件 hardcore ..
一種技術性的操作&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;所以作曲跟演奏哪個重要？
如果硬是要比個高下
作曲還是比較重要  屬於是 DNA
但有些歌曲很棒  但是經過重新詮釋後
像是伍佰寫的 #被動 ，原本寫給周華健唱
但在被伍佰重新編曲在演唱會演唱之前
應該很少人會喜歡這首歌&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;所以我個人不會給絕對的答案
不同領域 不同角度有不同看法
業務的價值 要技術與工程團隊支撐
技術與工程團隊 需要業務目標來挑戰
貶抑任一方
或者想比高下基本上沒啥意義
Dev &amp;amp; Ops 重點在合作
不在於誰比較重要&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://www.gtcafe.com/rickmidi/gossip/simple-complex/&#34;&gt;https://www.gtcafe.com/rickmidi/gossip/simple-complex/&lt;/a&gt;
[2] &lt;a href=&#34;https://www.youtube.com/watch?v=kta4ZAwI6rY&#34;&gt;https://www.youtube.com/watch?v=kta4ZAwI6rY&lt;/a&gt;
[3] &lt;a href=&#34;https://rickhw.github.io/2017/07/01/Management/Developer-or-Engineer/&#34;&gt;https://rickhw.github.io/2017/07/01/Management/Developer-or-Engineer/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/pfbid0269uX5QQZxxBBQCFQk9nbp2SnubVsmGdcYzr4u7GNJagbWFkQXULFs8qphUiaN4spl&#34;&gt;2019/08/17 (Backup)&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 退休</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0420_retirement/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0420_retirement/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10211086815805693&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10211086815805693&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;跟朋友聊到 #退休 的議題，我腦袋就是這場演講的內容。&lt;/p&gt;
&lt;p&gt;我常常問一個問題：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假設不缺錢，身體健康，不需要工作，你最想做什麼？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大部分的人工作為的是錢，除了錢之外呢？你的生命每天有一半以上的時間在工作，下班每天有八小時在睡覺，扣掉民生必需時間 2- 3 小時，跟親友相處的時間只有 1-2 小時，跟最親愛的人相處的時間可能只有一小時（除了睡覺）。&lt;/p&gt;
&lt;p&gt;那麼你人生的意義是什麼？&lt;/p&gt;
&lt;p&gt;退休了，不缺錢，有時間，有體力？聽過太多不切實際的想法，像是：環遊世界、學樂器、含飴弄孫、看書、學 OOXX &amp;hellip;&lt;/p&gt;
&lt;p&gt;說得直白點：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你有體力環遊世界？你知道什麼叫舟車勞頓？你有那個知識去探索世界？還是只是走馬看花？另一半願意跟你跑？有辦法跑？&lt;/li&gt;
&lt;li&gt;學樂器：這我聽過最多的，大多我都是勸退的，最重要的是不會欣賞。因為學樂器是很苦的，想要有成就感不要學樂器，而是學攝影。&lt;/li&gt;
&lt;li&gt;含飴弄孫：那要確定你能跟小孩好好溝通，可能你連跟同學都不知道要聊什麼了&lt;/li&gt;
&lt;li&gt;看書：看一輩子？平常閱讀習慣？能看長篇文字？現代人的閱讀能力我是打問號的&lt;/li&gt;
&lt;li&gt;學 OOXX ：醒醒吧阿宅&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;寫這段是因為，看過很多長輩（&amp;gt;60y），整天不知道做什麼，整天罵政府、出一張嘴。誇自己有年輕時有多厲害，然後呢？現在在做什麼？請問今年做了什麼？影響年輕人什麼？&lt;/p&gt;
&lt;p&gt;有一篇文章說：很多人三十歲就死了，只是七十歲才埋葬，一堆活死人整天在街上走。&lt;/p&gt;
&lt;p&gt;而吳念真這段說得很好，做自己想做的事，然後永不止息，保持熱忱，死在喜歡的事情上。然後 #幾歲 這件事情從來都不是問題，唯一的問題是你沒有想完成的事，你不知道走這一遭的目的是什麼。&lt;/p&gt;
&lt;p&gt;2009: &lt;a href=&#34;https://www.facebook.com/notes/rick-hwang/%E8%88%8A%E6%97%A5%E8%A8%98-%E9%80%80%E4%BC%91%E8%A6%8F%E5%8A%83/10152984238789115/?hc_location=ufi&#34;&gt;https://www.facebook.com/notes/rick-hwang/%E8%88%8A%E6%97%A5%E8%A8%98-%E9%80%80%E4%BC%91%E8%A6%8F%E5%8A%83/10152984238789115/?hc_location=ufi&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 入門 DDB</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0419-ddb/</link>
      <pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0419-ddb/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10211072729013532&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10211072729013532&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;「嚴格講，把手冊 K 完、做過 lab 只算入門而已，上了戰場才是學習的開始。」&lt;/p&gt;
&lt;p&gt;實務上，大部分的人不用說入門，可能連邊都沾不上。&lt;/p&gt;
&lt;p&gt;—
#DynamoDB 是這幾年花時間研究的 #NoSQL，他還滿複雜的、有不少負面的評價、也有很多好的精神在。今天跟同事介紹了基本概念還有 design principle &amp;hellip; 說明的過程又發現自己沒搞清楚的東西，分享過程收獲最多的往往是自己。&lt;/p&gt;
&lt;p&gt;我學東西的原則就是找一個範圍最大的，已經被證明可用的，然後把他學透、當主軸、了解原理、相關資源、了解他的優劣、使用場景、使用情境。熟了之後，才開始橫向擴展學習，開始質疑。&lt;/p&gt;
&lt;p&gt;這種東西通常實作他的會是一群這個領域的專家，通常我比較不會去質疑他能不能做什麼，而是質疑自己能否去了解他、駕馭它、善用它。&lt;/p&gt;
&lt;p&gt;這跟買音樂設備一樣，往往人家的設計是遠超過我們的需求的，大部分的人用到的只是設備功能的 1% 不到，然後多人就會開始下評論。這點好像啥領域都一樣，沒讀完手冊就開始幹樵的一堆。以前我買設備前，通常手冊都 k 過一次了才考慮要不要買 XD&lt;/p&gt;
&lt;p&gt;嚴格講，把手冊 K 完、做過 lab 只算入門而已，上了戰場才是學習的開始。&lt;/p&gt;
&lt;p&gt;這跟 #SRE 講到的想法一致：『值得警惕的是，理解一個系統應該如何工作並不能使人成為專家。只有靠調查系統為何不能正常工作才行。』&lt;/p&gt;
&lt;p&gt;PS: 文中提到 AWS CTO 的論文我 k 過，大部分看不懂 XD&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rickhw.github.io/2016/08/17/AWS/Study-Notes-DynamoDB/&#34;&gt;https://rickhw.github.io/2016/08/17/AWS/Study-Notes-DynamoDB/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#AWS
#NoSQL
#RDBMS&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 重構</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0416_refactoring/</link>
      <pubDate>Tue, 16 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0416_refactoring/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://rickhw.github.io/2017/11/04/Management/Re-org/&#34;&gt;https://rickhw.github.io/2017/11/04/Management/Re-org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#重構 (#Refactoring) 是軟體工程的名詞，也是本經典的著作（現在已經第二版）。簡言之就是透過系統性的 #實踐方法，讓程式碼更容易維護、更容易閱讀，但不影響產出結果。&lt;/p&gt;
&lt;p&gt;我把程式碼當作文章的一種，換言之寫文章不難，寫出好文章、有深度內容的，但能讓別人容易閱讀、理解的不容易。讀和寫是兩個能力，而寫是為了之後的閱讀，所以寫好文章的能力很重要，但只要花時間調整，文章會越來越好。而重構的目的就是讓下次的閱讀者，能夠更了解其中的意涵。&lt;/p&gt;
&lt;p&gt;實際上，重構在生活中到處都有，每個人每年都要重構自己，包含 各種人事物的斷捨離、歲末大掃除、企業組織重整、書架、生涯規劃、自己的作品、人際網路 &amp;hellip;. 重構的感覺是什麼？大概就是把整年沒打掃的房間，打掃之後的舒暢感。&lt;/p&gt;
&lt;p&gt;#去蕪存菁，#斷捨離&lt;/p&gt;
&lt;p&gt;重構會讓程式更好維護、更容易閱讀。&lt;/p&gt;
&lt;p&gt;執行重構，我第一件會做的是：變數與函式的命名。我自己的原則是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;語意重要性優先於變數的長度 (講清楚優先)&lt;/li&gt;
&lt;li&gt;每行程式長度 80 chars 以內&lt;/li&gt;
&lt;li&gt;可區分邏輯區塊與段落&lt;/li&gt;
&lt;li&gt;用詞詞性要思考&lt;/li&gt;
&lt;li&gt;單一原則&lt;/li&gt;
&lt;li&gt;商業功能：流程 &amp;gt; 邏輯&lt;/li&gt;
&lt;li&gt;效能功能：邏輯 &amp;gt; 流程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重構這本書提到很多人使用 IDE 寫扣的關鍵，是因為 #重構 功能的完整性。有時候我為啥還會開 Eclipse 寫東西，除了熟悉之外，重構是很重要的因素之ㄧ。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 金庸</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/blogged__0316-jinyoung/</link>
      <pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/blogged__0316-jinyoung/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210906113368245&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210906113368245&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1994 年 #倚天屠龍記 的這首配樂：#倆倆相忘 不管是詞、曲，還是編曲，都是經典中的經典。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;附圖是金庸 原著小說 (第三版) 中的截圖，原著小說的詞整理如下：&lt;/p&gt;
&lt;p&gt;世情推物理，人生貴適意。
想人間造物搬興廢，吉藏凶，凶暗吉。&lt;/p&gt;
&lt;p&gt;貴那能長富貴，日盈昃月滿虧蝕。
地下東南，天高西北，天地尚無完體。&lt;/p&gt;
&lt;p&gt;展放愁眉，休爭閒氣。
今日容顏，老如昨日。
古往今來，恁須盡知，
賢的愚的，貧的和富的。&lt;/p&gt;
&lt;p&gt;到頭這一身，難逃那一日。
受用了一朝，一朝便宜。
百歲光陰，七十者稀。
急急流年，滔滔逝水。&lt;/p&gt;
&lt;p&gt;金庸用這段，其實是元曲 #關漢卿 的作品。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;1994 年版的插曲： #倆倆相忘，詞：厲曼婷，演唱：辛曉琪&lt;/p&gt;
&lt;p&gt;拈朵微笑的花　想一番人世變化　到頭來輸贏又何妨
日與月互消長　富與貴難久長　今早的容顏老於昨晚&lt;/p&gt;
&lt;p&gt;眉間放一字寬　看一段人世風光　誰不是把悲喜在嘗
海連天走不完　恩怨難計算　昨日非今日該忘&lt;/p&gt;
&lt;p&gt;浪滔滔人渺渺　青春鳥飛去了　縱然是千古風流浪裡搖
風瀟瀟人渺渺　快意刀山中草　愛恨的百般滋味隨風飄&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;曲與編曲:&lt;/p&gt;
&lt;p&gt;整首曲子的旋律依照小說人物的背景設計：#小昭。小昭是西域波西人，也就今天的土耳其。在作曲與編曲上，使用了 #阿拉伯音階 呈現出異國風采的旋律，強化了小昭的背景。&lt;/p&gt;
&lt;p&gt;#金庸&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=KYLDv5r5eb0&#34;&gt;https://www.youtube.com/watch?v=KYLDv5r5eb0&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 開發鬼笑話</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0319_problems/</link>
      <pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0319_problems/</guid>
      <description>
        
        
        &lt;p&gt;一些觀察的現象：&lt;/p&gt;
&lt;p&gt;為了達到 X 的需要 (A + B + C) 都滿足。
因為時程，所以只做了 A, A 只是個能動的東西,
B/C 會讓 A 可長可久, 可維護, 可靠.&lt;/p&gt;
&lt;p&gt;一年後, X 出問題了.
但是大家卻以為 X = (A + B + C) 都完成了.
然後問為什麼這麼不穩定？
然後又要把故事講一次.&lt;/p&gt;
&lt;p&gt;因為時間久遠，所以講出來的故事長這樣：
X = A + B * C 才能完成.
花了很長時間說明，
終於搞懂 X = A + B * C
但卻已經忘了原來是 X = A + B + C&lt;/p&gt;
&lt;p&gt;經過兩個月的努力 X = A + B * C 完成了
但是 X 卻變成 X&amp;rsquo; 了
X&amp;rsquo; 上線一個月爆炸了
這時候來了一個外力，告訴大家，
應該用 Y = I * J + K 才能解決 X&amp;rsquo; 的需求
然後又開始一個新的專案叫做 Y
準備把 X&amp;rsquo; 換掉.
這時候已經沒人再提 X = A + B + C&lt;/p&gt;
&lt;p&gt;我應該去寫小說的。。。。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210921592795221&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210921592795221&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 質能轉換</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0316_3body/</link>
      <pubDate>Sat, 16 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0316_3body/</guid>
      <description>
        
        
        &lt;p&gt;source: &lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210904993180241&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210904993180241&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;三個領域物理能量的 #轉換 例子，日常生活中一直都存在：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;#視覺 (Vision)
1-1. 攝影：光影 (頻率) -&amp;gt; 鏡頭 (類比) -&amp;gt; 感光元件 (A/D) 轉成數位訊號 -&amp;gt; 處理器 (編碼) -&amp;gt; 儲存 (Storage)
1-2. 看照片：存在 Storage -&amp;gt; 讀取 -&amp;gt; 透過 D/A 轉換 -&amp;gt; 面板反應成像 -&amp;gt; 發光&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;聽覺
2-1. 錄音：聲音 (頻率) &amp;ndash;&amp;gt; 收音 (類比) -&amp;gt; 感應線圈 -&amp;gt; 訊號轉換 (A/D) -&amp;gt; 轉成數位訊號 (Digital Audio) -&amp;gt; 儲存 (Storage)
2-2. 放音：儲存 &amp;ndash;&amp;gt; 讀取 &amp;ndash;&amp;gt; Digital Audio 資料送給 A/D 轉換器 -&amp;gt; 送給喇叭 -&amp;gt; 發出聲音&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;溝通
3-1. 聽講：嘴巴發聲 -&amp;gt; 空氣 -&amp;gt; 耳朵收音 -&amp;gt; 聽到 (聲音轉成訊號) -&amp;gt; 腦袋轉換 -&amp;gt; 理解
3-2. 演說：腦袋裡的想法 &amp;ndash;&amp;gt; 轉換語言 -&amp;gt; 嘴巴發聲 -&amp;gt; 傳到空氣
其實就是我說過的兩個人的溝通，其實是六個人的對話  [1]。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;能量形式的轉換，如果說意念，也是一種能量，那麼每次的轉換，都會有損失，這就是 #溝通成本。&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210550709083360&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210550709083360&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 滷肉攤架構</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0315_arch/</link>
      <pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0315_arch/</guid>
      <description>
        
        
        &lt;p&gt;source: &lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210901702257970&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210901702257970&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;開一家店，賣滷肉飯 + 貢丸湯，
一個人，獨立服務客人，
這是 #單體  (#Monolithic)。&lt;/p&gt;
&lt;p&gt;開一家店，讓別人加盟一起賣滷肉飯，
這是 #可擴展 (#Scalable) 。&lt;/p&gt;
&lt;p&gt;僱兩個人一起煮菜，這叫 #高可用 (#HighAvailable, HA)
擺小菜讓客人等待時可以吃，這叫做緩存 (#Cache)，
門口限制進入的數量，這叫做限流 (#RateLimit)，
客人進來平均分配座位，這叫負載平衡 (#LoadBalancer)
這家店只有一個入口，這是 #APIGateway。&lt;/p&gt;
&lt;p&gt;開一家店，
同時賣滷肉飯、肉圓、雞排、蚵仔煎、燒烤、漢堡，
他們有個共用的購買路線、結帳流程、
統一的招牌格式、收盤的程序 &amp;hellip;.
這是 #微服務 (Microservices)。&lt;/p&gt;
&lt;p&gt;為了讓每個攤位快速進駐，
用了一套同規格的桌子，這叫 #容器。
可以讓大家快速進駐時，可以方便隨時調整
所以用了動態安排的方法，這叫做編排 (#Orchestration)
每個攤位都可以限流、知道攤位狀況，
這叫做 #ServiceMesh&lt;/p&gt;
&lt;p&gt;一顆肉圓，分別放在兩個盤子，這叫做分片 (#Sharding)
客人點一顆肉圓，準備兩份，這叫做副本 (#Replication)
一些盤子分別散在幾張桌子，這叫做分區 (#Partition) &amp;hellip;&lt;/p&gt;
&lt;p&gt;用兩個爐子，一個蒸肉圓，一個保溫。
這叫做 #MasterSlave。&lt;/p&gt;
&lt;p&gt;開兩家店，一家營業，
另一家買一樣的設備，備用，
這叫做 #異地備援 的 #ActiveStandby Mode (AS Mode)&lt;/p&gt;
&lt;p&gt;開一家店，
不用雇人，擺幾台機器抓娃娃，就可以自己賺錢了，
這是 #Serverless &amp;hellip;.&lt;/p&gt;
&lt;p&gt;弄一個賣場，裡面啥都可以擺，
有倉庫，也有動線，有可以客製化的結帳台，
有娃娃機、各式各樣的桌子、
這叫做 #雲服務。。。&lt;/p&gt;
&lt;p&gt;把上面的東西全部擺在一體育館，
稱為 單體分散微服務 Serverless 架構 (誤）&lt;/p&gt;
&lt;p&gt;店還沒開成，大家吵成一團，
一個人出來說：我們一起努力把店開成吧～～
這個人是 Agile Coach&lt;/p&gt;
&lt;p&gt;&amp;hellip;.. 我掰不下去了。。。。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 組織政治</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0308_org/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0308_org/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210868323543523&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210868323543523&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;記錄一件很多年前發生過的事情：&lt;/p&gt;
&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;
&lt;p&gt;上一個工作，我大概剛 on board 一個月。&lt;/p&gt;
&lt;p&gt;空降 CTO (在米國) 發一封信，給各個 Sites (TPE, WH, ZH, US)，各單位的大頭 (從業務、工程、工廠、後勤行政、分公司)，內容大概是說明大家以後是一起合作的團隊，需要各單位協助安排資源。&lt;/p&gt;
&lt;p&gt;這個事業部是一家大公司裡的新事業部，CTO 是空降的，其他地方的頭不是原本的地頭蛇，不然就是從外面找來的空降。我是當時其中一的一個，只是我是新加入，但是要從頭開始建立團隊的人。&lt;/p&gt;
&lt;p&gt;基於這樣的背景之下，這封 Email 內容後來發生以下問題：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有些組織名稱一樣，像是開發部、QA .. 而實際上是分屬於軟、硬體的，內容很多人有看沒有懂。&lt;/li&gt;
&lt;li&gt;因為組織名稱一樣，兩個頭分別不認識彼此，因此在信件裡出現分工問題，例如他講測試的時候，同時打到四個人，但是四個分屬不同專業背景的測試。軟硬體的測試專業又天差地遠。&lt;/li&gt;
&lt;li&gt;CTO 有出來協助離清楚，但 CTO 也畫不出組織架構圖，換言之，無法搞清楚這些人的功能別。&lt;/li&gt;
&lt;li&gt;地頭蛇很強勢，直接回信亮 Title，例如：我是 XX 區 OO 負責人，這件事情我覺得如何如何 &amp;hellip;. (Email 裡就開幹了)&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;問題&#34;&gt;問題&lt;/h1&gt;
&lt;p&gt;CTO 沒有釐清楚這些人的狀況之下，在跨地區、跨時區、跨語言的背景，發這樣的信，造成誤解與溝通衝突。&lt;/p&gt;
&lt;p&gt;原集團 CEO 沒有協助新 CTO 把這些地頭蛇搞定，而讓他們在不清楚狀況之下落入溝通風暴。&lt;/p&gt;
&lt;p&gt;地頭蛇很自以為是，對於新來的空降頭配合度低，嚴重的穀倉現象。&lt;/p&gt;
&lt;h1 id=&#34;解決&#34;&gt;解決&lt;/h1&gt;
&lt;p&gt;CTO 開始巡迴、到處拜碼頭，約各地的頭吃飯喇低賽。CEO 直接跟地頭蛇摸頭，讓地頭蛇知道有新任務，要求大家全力支援新事業處的 CTO。&lt;/p&gt;
&lt;p&gt;過程中我受到當時 IT VP 協助甚多，也去跟他們原本事業處的各地的頭碰面、喇低賽。建立 Connection 之後，後來的事情才有辦法開始做，也就是真正團隊內部的事。&lt;/p&gt;
&lt;p&gt;這件事情一直放在我心裡，因為看到一個組織的運作，如果沒有適度的潤滑，沒有清楚的分工與組織，組織名稱重複，加上跨區、跨文化、跨語言。衝突是天天上演，根本不需要談目標。&lt;/p&gt;
&lt;p&gt;#ProtectedMessage.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這故事後來有一些有趣的發酵：&lt;/p&gt;
&lt;p&gt;各地的頭開始飛來飛去，Global IT VP、工廠 VP、工廠 QA 頭、硬體研發 QA/RD 頭、台灣區硬體研發頭、台灣區的 IT 頭、美國硬體研發頭、武漢業務頭、台灣業務頭、台灣分公司 GM、武漢 GM &amp;hellip; 反正一堆頭，飛來飛去，到處吃飯喝茶拉低賽。&lt;/p&gt;
&lt;p&gt;有趣的是同角色名稱，但不同領域的頭、不同地區的頭，相互拜碼頭。我那時候是新事業處軟體 QA 頭，結果去拜會了硬體研發 QA 頭、工廠 QA 頭，這些各地又有各地的頭。。。台灣區硬體 QA 頭跑來找我說，原來軟體也有 QA 啊～～～&lt;/p&gt;
&lt;p&gt;我都快 Qoo 了。。。&lt;/p&gt;
&lt;p&gt;其實，有時候發 Email 不相干的人不要加，除非策略上，就是要讓他爆。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 人類簡史 閱讀筆記</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0303-reading/</link>
      <pubDate>Sun, 03 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0303-reading/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210842588820171&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210842588820171&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近讀了以色列歷史學家  #哈拉瑞 的大作 #人類簡史、#未來簡史 ，書中提到很多關於 #人類意識 的議題，結論是人類只是計算機。&lt;/p&gt;
&lt;p&gt;理性的思考來說，我承認，人類的意識只是一段演算法，實際上背後是由另外一個高等智慧文明做創造。換言之，人類的 #自由意識 並不存在。&lt;/p&gt;
&lt;p&gt;但矛盾的是，感性的思考，我覺得 #自我意識 又是存在的，記憶是存在的，記憶與情緒構成人性，構成 #本我、#真我，形成一個有 #個性 的個體。&lt;/p&gt;
&lt;p&gt;附件連結是 2018 年下半年度，我一些想法的整理，這些文字，保留了我最存粹的想法，不侷限於外在的力量與約束，形成現在的我，形成一個 #真我。&lt;/p&gt;
&lt;p&gt;文長，要讀。如果你想了解我對於 #軟體工程 的想法，如果你想跟我對話關於 #價值觀、#生命週期、#努力與天賦、#人生觀、#溝通、#目標、#思考、#選擇  &amp;hellip; etc. &amp;hellip; 這段整理，是我們無言的對話，也是認識深度彼此的開始。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rickhw.github.io/2019/01/10/About/Thinkin-2018H2/&#34;&gt;https://rickhw.github.io/2019/01/10/About/Thinkin-2018H2/&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 依賴反轉</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0302-di/</link>
      <pubDate>Sat, 02 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0302-di/</guid>
      <description>
        
        
        &lt;p&gt;#done&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210837105563093&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210837105563093&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#坐車隨筆&lt;/p&gt;
&lt;p&gt;#依賴反轉 (Dependency Inversion, DI) 是軟體工程裡的一種原則，目的是解構兩個軟體元件之間的強關係、高耦合的現象，透過反轉的特性，讓高層次介面自行決定如何依賴其他元件，達到 #控制反轉 (#IoC, Inversion of Control) 的效果。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DI 最有名的說法：&amp;ldquo;Don’t call me, I’ll call you&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同樣的概念，應用在軟體，也可以應用在 #管理團隊 的協作，也就是把團隊之間依賴的特質，反轉回去。舉例來說，A 團隊執行任務，但依賴於 X 與 Y 團隊，B 團隊依賴於 Y 與 Z 團隊，A / B 兩團隊需要同時間交付任務，最後的 Battleneck  一定會出現在 Y 團隊，然後就會出現 Lock 現象。&lt;/p&gt;
&lt;p&gt;執行的任務與需求，只要透過依賴反轉的方式，例如讓 Y 團隊開發工具 (SDK / CLI / API)，給 A / B 團隊使用，讓這兩個團隊自行決定如何使用，然後就會得到結果，而不需要過度依賴於 Y 團隊，影響專案進行，也影響團隊士氣。&lt;/p&gt;
&lt;p&gt;而 A / B 兩團隊要使用 Y 團隊開發的工具，前提必須在這三個團隊之間定義 #介面 (#Interface)，也就是彼此協作的 #協議 (#Protocol)。透過這個協議，#解偶 任務執行過程中的 #阻塞現象 (Blocking)，然後以 #非同步方式 (Async) 執行任務，讓 A / B 之間不要因為排隊、或者強佔 Y 團隊的資源，造成 Lock 現象。&lt;/p&gt;
&lt;p&gt;Interface 與 Protocol 的定義是團隊跟團隊協作的必要，而這是管理者的工作，因為只有在資訊條件充裕的狀況之下，方能定義出這些東西。&lt;/p&gt;
&lt;p&gt;這些概念，在計算機科學裡，都有對應的模型與機制 (I/O Models)，而在人與人之間的協作，其實也有一模一樣的現象。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: SQA 面試題目</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0224-interview-sqa/</link>
      <pubDate>Sun, 24 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0224-interview-sqa/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210807880992497&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210807880992497&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上週 SRE 聚會聊到面試考題，分享我上一個工作 (SQA Manager, 2012~2015) 的面試考題。。。面試角色有兩種： SQA、SDET (Java)，共同考題：英文閱讀&lt;/p&gt;
&lt;p&gt;難易度，我個人評分是 2/5 (5 最難)&lt;/p&gt;
&lt;p&gt;資科、資工畢業的，應該九成輕鬆答對。然後，不要懷疑，這是我認定 QA 該具備的基本能力。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 架構與錄音介面</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0224-queue-in-muisc-production/</link>
      <pubDate>Sun, 24 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0224-queue-in-muisc-production/</guid>
      <description>
        
        
        &lt;h2 id=&#34;0824&#34;&gt;02/24: &lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210808014435833&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210808014435833&lt;/a&gt;
08/24: &lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10211752258481344&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10211752258481344&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上週跟朋友喇賽，聊到做音樂的一些概念，與系統架構 (Queue) 的對照。&lt;/p&gt;
&lt;p&gt;做音樂時，需要 #錄音介面，專有名詞稱為 Sound Interface，主要有兩個目的：處理數位與類比訊號的轉換，一班稱為 A/D、D/A。DSP 晶片越強大，處理速度就越快。&lt;/p&gt;
&lt;p&gt;大家要知道一件事情，音樂是時間藝術，換言之，製作音樂（通常是編曲、混音）過程中，聲音的產生是需要即時性的，否則會讓人有延遲感 (Delay)，編曲、錄音過程會很卡。&lt;/p&gt;
&lt;p&gt;什麼叫做 #即時？50ms 叫即時？1ms 叫即時？其實，人類感覺不出來延遲，就叫做即時。但是每個人感覺不一樣，受過訓練的樂手超過 20ms 就感覺得出來，沒訓練過的一班人可能 70ms 都還沒感覺。&lt;/p&gt;
&lt;p&gt;做音樂過程，會在鍵盤上（Keyboard，一般稱為 Controller，可以是鍵盤、電子鼓、DJ 控制器）輸入訊號，透過 MIDI Protocal 產生 MIDI Message 給音源。詳細的流程參閱我的整理文章 &lt;a href=&#34;http://rickmidi.blogspot.com/2011/09/concepts-of-music-technology.html&#34;&gt;1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;音源產生聲音方式有兩種：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;#取樣播放：也就是播放錄好的聲音，例如把中央 A 錄起來，然後讀出來播放，吃的是 I/O 與記憶體。&lt;/li&gt;
&lt;li&gt;#合成運算：也就是合成器，專有名詞 #Synthesizer 。主要適用 #振盪器 (OSC, LFO, HFO) 加上波形 #產生器 (正玄波、方波、三角波) ，還有 #濾波器 (Filter) 合成的聲音，這吃的是電腦運算，也就是 CPU。用電腦科學來講，就是一種演算法，最有名的就是 #史丹佛大學 的 #FM &lt;a href=&#34;https://digilog.tw/posts/421&#34;&gt;2&lt;/a&gt; 合成器技術，後來賣給 YAMAHA。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果是硬體處理，則是 DSP 直接運算處理。&lt;/p&gt;
&lt;p&gt;附圖是我的 Sound Interface 透過電腦當運算單元的設定畫面，在 Logic Pro 可以看到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sample Rate 越高，Latency 也越高&lt;/li&gt;
&lt;li&gt;Sample Rate 越低，Latency 也越低&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這就跟 架構的 Queue 一樣，存越久的 Message，代表處理時間可能越久，反應速度越慢。反之亦然。&lt;/p&gt;
&lt;hr&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 好軟體</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0220-good-software/</link>
      <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0220-good-software/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210784802695554&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210784802695554&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我們常常希望軟體工程師可以開發出好軟體。&lt;/p&gt;
&lt;p&gt;不過我覺得要先想幾個問題：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你覺得怎樣算是 #好軟體？&lt;/li&gt;
&lt;li&gt;你怎麼樣 #使用 一個軟體？&lt;/li&gt;
&lt;li&gt;你怎麼樣 #選擇 軟體？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;學樂器過程，除了學技巧、學樂理、練歌曲，更重要的是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你覺得怎樣算是 #好音樂？&lt;/li&gt;
&lt;li&gt;你怎樣 #欣賞 一首歌？&lt;/li&gt;
&lt;li&gt;你怎麼 #選擇 音樂？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;同樣的，廚師有好有壞，但是也需要想這些問題：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你覺得怎樣才是 #好料理？&lt;/li&gt;
&lt;li&gt;你怎麼 #品嚐 一道料理？&lt;/li&gt;
&lt;li&gt;你怎樣 #選擇 料理？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;再一個例子，小說家也會需要想這些：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你覺得怎樣才是 #好的小說？&lt;/li&gt;
&lt;li&gt;你怎麼 #閱讀 一部小說？&lt;/li&gt;
&lt;li&gt;你怎樣 #選擇 小說？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其他領域可以自己延伸、舉例，像是車、房子、地區、環境、民生必須、穿著、 &amp;hellip;.&lt;/p&gt;
&lt;p&gt;回到第一個問題，怎樣的軟體是 #好軟體？你用過哪些軟體覺得是好，為什麼？&lt;/p&gt;
&lt;p&gt;然後回到最開始的，軟體工程師要怎樣才能寫出好軟體？&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 看狀況，Context</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0220/</link>
      <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0220/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/photo.php?fbid=10210784715333370&amp;amp;set=a.4018937451224&amp;amp;type=3&amp;amp;theater&#34;&gt;https://www.facebook.com/photo.php?fbid=10210784715333370&amp;amp;set=a.4018937451224&amp;amp;type=3&amp;amp;theater&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;截圖文章的主軸是談 #代碼精進之路，內容是以工程角度看待效能、架構、品質與 #敏捷開發 等事情。所以，不同角度的人，看待同一件事情，很習慣地會站在自己的立場說話。&lt;/p&gt;
&lt;p&gt;我個人的看法？恩，最近很常說類似的話：要看狀況。很多現象、解決方案、技術，沒有前提（也就是故事）的討論，是沒意義的，而且很容易起衝突。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在我不了解你的背景故事前提，解決方案與技術都只是參考&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;架構、效能、品質問題，放在創業前期：市場驗證階段（燒錢），談這些東西可能會被白眼，所以通常會找高手直接讓這些『任務』Built-in 在裡面，不過實際做過的人都知道：這要時間，這要高手（不是找高手了？）、這坑很多。。。。&lt;/p&gt;
&lt;p&gt;而在企業發展的成長期，這些題目絕對是關鍵，是否能夠轉大人的關鍵點，所以這個時期的老闆魄力與決斷力會決定這家企業的生死存亡，換言之，轉不過去，很快地就會被外面追趕上來，或者自己內部就炸鍋了。&lt;/p&gt;
&lt;p&gt;上述兩個例子的『企業的階段狀況』，就是我說的前提與背景。&lt;/p&gt;
&lt;p&gt;文章的內容我是認同的，但是沒有前提背景。而實際的狀況是：你很難找到一個品質足夠的團隊來執行文中提到的任務，因為大部分（經驗值）的需求，本身是沒品質的，沒品質的需求後面的工程能有多少品質？&lt;/p&gt;
&lt;p&gt;談怎樣的東西，要看作者的背景 [1]。所以有時候看文章、聽演講要先瞭解作者的背景，還有立場，有時候內容只是見人說人話，見鬼說鬼話，要自己有判斷力。&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://rickhw.github.io/2017/09/14/SoftwareEngineering/Software-Development-Lifecycle/&#34;&gt;https://rickhw.github.io/2017/09/14/SoftwareEngineering/Software-Development-Lifecycle/&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 管理者的軟體工程</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0219-software-engineering/</link>
      <pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0219-software-engineering/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210776186440153&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210776186440153&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;撇開中美貿易戰、華為資安疑慮，以經營企業來看，一般企業上位者、管理者很少懂「#軟體工程」，更別提實踐。&lt;/p&gt;
&lt;p&gt;而這封內部信件的標題：『全面提升軟體工程能力與實踐，打造可信的高品質產品』，能發這樣的信，具體說軟體工程與實踐，具體的產品品質信念，文中有給工程師的、有架構的觀點、有務實的品質實踐、規範，明確公司目標與方向，而且不是教調是的八古文。&lt;/p&gt;
&lt;p&gt;摘要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们要转变观念，追求打造可信的高质量产品，不仅仅是功能、特性的高质量，也包括产品开发到交付过程的高质量。&lt;/li&gt;
&lt;li&gt;我们要从最基础的编码质量做起，视高质量代码为尊严和个人声誉。&lt;/li&gt;
&lt;li&gt;我们要深刻理解架构的核心要素，基于可信导向来进行架构与设计。&lt;/li&gt;
&lt;li&gt;我们要重构腐化的架构及不符合软件工程规范和质量要求的历史代码。&lt;/li&gt;
&lt;li&gt;我们要深入钻研软件技术，尤其是安全技术。&lt;/li&gt;
&lt;li&gt;我们要遵守过程的一致性。&lt;/li&gt;
&lt;li&gt;为此，我们要改变行为习惯，追求精品。&lt;/li&gt;
&lt;li&gt;更为重要的是，我们将通过变革形成一套适应上述变化的流程、组织与考核机制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;——&lt;/p&gt;
&lt;p&gt;類似的，Amazon 貝佐斯的內部信件也是類似的：Jeff Bezos’ Mandate: Amazon and Web Services [1] 提到的架構規範 [2] 其實是類似的。&lt;/p&gt;
&lt;p&gt;熟悉 AWS Architecture 概念的人，一眼就能看出華為這篇架構規範提到的蓋念，跟 Well-Architected [3] 很像。&lt;/p&gt;
&lt;p&gt;台灣的企業，有哪個老闆有這樣的眼界的？&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&#34;http://jesusgilhernandez.com/2012/10/18/jeff-bezos-mandate-amazon-and-web-services/&#34;&gt;http://jesusgilhernandez.com/2012/10/18/jeff-bezos-mandate-amazon-and-web-services/&lt;/a&gt;
[2] &lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210210201970895&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210210201970895&lt;/a&gt;
[3] &lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10209650652782515&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10209650652782515&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 能量轉換</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0218-transformation/</link>
      <pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0218-transformation/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210773944264100&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210773944264100&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;三個 #轉換 的例子&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;視覺
1-1. 拍照片：光影 (頻率) -&amp;gt; 鏡頭 (類比) -&amp;gt; 感光元件 (A/D) 轉成數位 -&amp;gt; 儲存 (Storage)
1-2. 看照片：存在 Storage -&amp;gt; 讀取 -&amp;gt; 透過 D/A 轉換 -&amp;gt; 面板反應成像 -&amp;gt; 發光&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;聽覺
2-1. 錄音：聲音 (頻率) &amp;ndash;&amp;gt; 收音 (類比) -&amp;gt; 感應線圈 -&amp;gt; 訊號轉換 (A/D) -&amp;gt; 轉成數位訊號 (Digital Audio) -&amp;gt; 儲存 (Storage)
2-2. 放音：儲存 &amp;ndash;&amp;gt; 讀取 &amp;ndash;&amp;gt; Digital Audio 資料送給  A/D 轉換器 -&amp;gt; 送給喇叭 -&amp;gt; 發出聲音&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;溝通
3-1. 聽講：嘴巴發聲 -&amp;gt;  空氣 -&amp;gt; 耳朵收音 -&amp;gt; 聽到 (聲音轉成訊號) -&amp;gt; 腦袋轉換 -&amp;gt; 理解
3-2. 演說：腦袋裡的想法 &amp;ndash;&amp;gt; 轉換語言 -&amp;gt; 嘴巴發聲 -&amp;gt; 傳到空氣&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有啥關係？
其實我也不知道 XDD&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 部署測試</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0218_software-test/</link>
      <pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0218_software-test/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210774369514731&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210774369514731&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我在 #軟體測試階段 [2] 介紹中，提到一個概念: Deployment Test，也就是那些部署程式自身的測試。在另一篇文章 介紹 #CodeDeploy [3] 時，也點出類似概念：#Pipeline 的 scripts 必須可以進 Git 版控、可以在開發者本機做測試、驗證，而不是被工具綁死。&lt;/p&gt;
&lt;p&gt;而這個影片 [1] (by AWS) 的標題是同一個概念：Pipelines Should be Managed as Code: How Do You Test Your Pipeline Changes?&lt;/p&gt;
&lt;p&gt;同樣的概念，我在 #軟體開發生命週期 (Software Development Lifecycle, SDLC) [4] 一文的整理中，在 2016 年的版本中，提到 Pipeline 橫跨整個開發週期的想法，同時包含了 Provisioning、Infra as Code、Orchestration 等實務的想法。&lt;/p&gt;
&lt;p&gt;其他類似想法的整理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2018/11/27 [5]&lt;/li&gt;
&lt;li&gt;2018/11/07 [6]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這些差不多就是在說明 #PipelineAsCode 的想法，除了 asCode 這些想法，其實還有一個關鍵點，也是很多人會犯錯的坑：AsCode 之後 Pipeline 所有的 Job 必須可以個別獨立執行，或者由不同角色，個別決定如何執行。否則就會陷入這樣的陷阱：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;飛機飛行都自動化了，但出狀況的時候，機長廣播跟大家說，他不會手動飛行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這概念，大概就是一般設計 #批次程序 時注意的，基本的原則：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有的程序可以獨立執行，通常是 command line&lt;/li&gt;
&lt;li&gt;程序可以透過 stdin, stdout 串起來，也就是 pipe&lt;/li&gt;
&lt;li&gt;程序跟程序之間的資源，不會相互干擾&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;類似的應用，在很多地方:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;電商的後台交易批次程序&lt;/li&gt;
&lt;li&gt;銀行批次作業&lt;/li&gt;
&lt;li&gt;軟體自動化測試程序&lt;/li&gt;
&lt;li&gt;維運系統的批次程序&lt;/li&gt;
&lt;li&gt;非同步的系統功能 (非同步都是這種)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#DevOps&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://www.youtube.com/watch?v=paiaoRlJZTc&#34;&gt;https://www.youtube.com/watch?v=paiaoRlJZTc&lt;/a&gt;
[2] &lt;a href=&#34;https://rickhw.github.io/2017/03/18/SQA/Stages-In-Software-Testing/&#34;&gt;https://rickhw.github.io/2017/03/18/SQA/Stages-In-Software-Testing/&lt;/a&gt;
[3] &lt;a href=&#34;https://rickhw.github.io/2017/08/13/AWS/Study-Notes-CodeDeploy-Preparation/&#34;&gt;https://rickhw.github.io/2017/08/13/AWS/Study-Notes-CodeDeploy-Preparation/&lt;/a&gt;
[4] &lt;a href=&#34;https://rickhw.github.io/2017/09/14/SoftwareEngineering/Software-Development-Lifecycle/&#34;&gt;https://rickhw.github.io/2017/09/14/SoftwareEngineering/Software-Development-Lifecycle/&lt;/a&gt;
[5] &lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210320994260633&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210320994260633&lt;/a&gt;
[6] &lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210371671407530&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210371671407530&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: VSTS</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0217-vsts/</link>
      <pubDate>Sun, 17 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0217-vsts/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/photo.php?fbid=10210768371004772&amp;amp;set=a.1559674051176&amp;amp;type=3&#34;&gt;https://www.facebook.com/photo.php?fbid=10210768371004772&amp;amp;set=a.1559674051176&amp;amp;type=3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure DevOps (#VSTS) 每個 Project 左側功能區塊，分成幾個部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;#Summary: 也就是看到全貌，包含 Dashboard、Wiki 部分&lt;/li&gt;
&lt;li&gt;#Boards: 也就是執行狀況 (Execution)，內容以看板呈現，分成 Work Items, Boards, Sprint, Query 等形式呈現。其實重點在於如何 #執行，有哪些項目、哪一些階段、執行狀況、客制的查詢 等&lt;/li&gt;
&lt;li&gt;#Repository: 是開發過程原始碼的分支管理 (Branches)，分成 Source, Commit, Branches, Pushes, Tags, Pull Request .. 等&lt;/li&gt;
&lt;li&gt;#Pipeline: 是串接 CI/CD 的控制單元，也是一般 DevOps 在討論 #自動化 的重要區塊, 有 Builds, Release, Libraries,&lt;/li&gt;
&lt;li&gt;#Test: 測試執行紀錄，分成 Plan, Run, Load Test 三塊.&lt;/li&gt;
&lt;li&gt;#Artifacts: 產出物管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;依照職業角色的對應，我這樣整理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Summary, Board：所有人&lt;/li&gt;
&lt;li&gt;Boards：Managers / PMs / POs / 所有人&lt;/li&gt;
&lt;li&gt;Repository: Developers&lt;/li&gt;
&lt;li&gt;Pipeline: DevOps / Ops / SRE&lt;/li&gt;
&lt;li&gt;Test: Testers / QAs / QE / SDET&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本上，這些概念可以免強對應到我的 SDLC [1] 裡提到的四個 #角色 與 #階段，也就是 Plan, Execution, Acceptance, Go Live.&lt;/p&gt;
&lt;p&gt;實際上還是有少，例如，Plan 功能太弱，沒有 User Story Mapping；執行過程的通知功能很弱，不容易通知相關人。維運功能太少，沒有部署後的 Dashboard，沒有 E2E 的 Feedback 管理 (類似於客戶關係管理)、沒有系統狀況檢核 (Health Dashboard) &amp;hellip;&lt;/p&gt;
&lt;p&gt;不過相較於其他協作系統，在 #開發階段 ，算是相對完整的。&lt;/p&gt;
&lt;p&gt;我理想的協作系統：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;各個層級的 View: 高階主管可以看到年度計畫 (附圖)&lt;/li&gt;
&lt;li&gt;執行面的管理者可以精準掌握年度計畫的同步資訊&lt;/li&gt;
&lt;li&gt;一線執行者 (PO/Dev/QA/Ops)，可以知道年度計畫的變動&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://rickhw.github.io/2017/09/14/SoftwareEngineering/Software-Development-Lifecycle/&#34;&gt;https://rickhw.github.io/2017/09/14/SoftwareEngineering/Software-Development-Lifecycle/&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 紀律</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0216-lead/</link>
      <pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0216-lead/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210763597605440&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210763597605440&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#電影 Hunter Killer&lt;/p&gt;
&lt;p&gt;領導者：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空降主管，如何服眾：紀律、目標&lt;/li&gt;
&lt;li&gt;指令精準，沒有遲疑&lt;/li&gt;
&lt;li&gt;相信下屬，充分授權&lt;/li&gt;
&lt;li&gt;危機處理：藝高、膽大、心細&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不錯看，很精彩，張力夠大，
也很戲劇化，雖然滿容易猜到劇本的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://arielhsu.tw/hunter-killer/&#34;&gt;http://arielhsu.tw/hunter-killer/&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: Auto Ops？</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0213-auto-ops/</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0213-auto-ops/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210748500068011&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210748500068011&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;老話一句：當飛機出問題時，機師說沒自動駕駛，他不會降落。&lt;/p&gt;
&lt;p&gt;把「飛機」換成「系統」，把「機師」換「工程師」。&lt;/p&gt;
&lt;p&gt;再說一次：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自動化不是什麼都不用知道&lt;/li&gt;
&lt;li&gt;軟體自動化 XXX [1] 的難度遠比一班業務功能複雜&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我強烈反對為自動而自動。
爛的扣，只會製造更多工作機會。
自動化是給有程度的工程師做的事情。&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://rickhw.github.io/2017/08/30/DevOps/Automation-or-Process/&#34;&gt;https://rickhw.github.io/2017/08/30/DevOps/Automation-or-Process/&lt;/a&gt;
[2] &lt;a href=&#34;https://gushi.tw/autopilot-and-pilot/&#34;&gt;https://gushi.tw/autopilot-and-pilot/&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: Design Pattern</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0213_design-pattern/</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0213_design-pattern/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210748760634525&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210748760634525&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#隨筆&lt;/p&gt;
&lt;p&gt;#DesignPattern 存在的目的，不是為了掉書袋、耍專業的傲慢，而是讓工程師跟工程師之間、開發者跟開發者之間，能夠 #高效溝通。&lt;/p&gt;
&lt;p&gt;叫兩個不同語言背景的工程師 (Node.js, GoLang) 說明 Observer Pattern，結果應該是一樣的。因為 Design Pattern 講的是抽象觀念，不是實作技術。透過直接使用 Pattern 的溝通會更效率化溝通。&lt;/p&gt;
&lt;p&gt;Design Pattern 是溝通的 #術語，也是專業的體現。如果不知道 Observer Pattern 是啥鬼，那應該要知道回去好好用功，或者好好請教有經驗的人。&lt;/p&gt;
&lt;p&gt;Design Pattern 是工程師之間的抽象介面術語，是為了高效溝通。而組織跟組織之間的溝通也是一樣，溝通的東西也是抽象介面，而不是自己的技術生態圈。如果管理階層都無法在抽象介面之上，建立良好的抽象協議，那麼所有的溝通實際上是沒意義的。&lt;/p&gt;
&lt;p&gt;另外 Design Pattern 不僅止於工程師之間的溝通術語，他的本質與 #系統架構 是一模一樣的概念，換言之，在 Design Pattern 中各個討論 Pattern 的方式與結構，同樣可以套用在溝通 #系統架構 上，同樣的這個溝通也是抽象介面，不談實際的技術實踐。&lt;/p&gt;
&lt;p&gt;所以：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;工程師跟工程師之間的高效溝通&lt;/li&gt;
&lt;li&gt;系統架構的高效分析&lt;/li&gt;
&lt;li&gt;組織跨團隊的高校溝通&lt;/li&gt;
&lt;li&gt;組織與系統的對應與高效溝通 (#康威定律)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;這些本質上都類似，這些都考驗 #抽象化（唬爛）能力。另外可以再加上 OOP 來論述。&lt;/p&gt;
&lt;p&gt;今天聽完外部產品經理分享的想法整理，其實這個分享有很多點在我的這篇文章 [1] 裡都有。&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://rickhw.github.io/2017/11/26/Thinking-in-Essence/&#34;&gt;https://rickhw.github.io/2017/11/26/Thinking-in-Essence/&lt;/a&gt;
&lt;a href=&#34;https://openhome.cc/Gossip/StudyGossip/abstractThinking.html&#34;&gt;https://openhome.cc/Gossip/StudyGossip/abstractThinking.html&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 自動化？程序化？</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0213-autotest/</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0213-autotest/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210748626711177&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210748626711177&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;偶爾要提一下。&lt;/p&gt;
&lt;p&gt;基本上，大部分現在軟體開發中的『自動化』（特別是 #自動化測試）本質上都只是『程序化』，通常這些『程式』可用的生命週期不會超過一年，實際上維護的成本，會遠比自身帶來的效益大過很多。&lt;/p&gt;
&lt;p&gt;#自動化 與 #程序化 的差異：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序化：照本宣科地做事情&lt;/li&gt;
&lt;li&gt;自動化：除了做事情，還會依據 Feedback 的結果，自我修正與調整。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這是兩種層次的課題，沒有辦法針對 Feedback 做出 Action  的，都只是一堆程序個體。&lt;/p&gt;
&lt;p&gt;補充：現在很多人在做的 CI/CD Pipeline，本質上都只是一堆串程序的作業而已，談不上『自動』。&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://rickhw.github.io/2017/11/12/DevOps/Gossip-Automation/&#34;&gt;https://rickhw.github.io/2017/11/12/DevOps/Gossip-Automation/&lt;/a&gt;
[2] &lt;a href=&#34;https://rickhw.github.io/2017/12/21/DevOps/What-is-Automation/&#34;&gt;https://rickhw.github.io/2017/12/21/DevOps/What-is-Automation/&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 規劃網路 - AWS VPC</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0212-vpc/</link>
      <pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0212-vpc/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210742817845959&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210742817845959&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS 每個新服務推出來，過一段時間 VPC 就要弄一個東西來解決這些服務之間串接的問題，也就是服務跟服務之間如何溝通，這段 Network Topologies 本質上就是在處理 Routing，也就是我說過的問題：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;學習 AWS 如果不懂 VPC 以及 Routing，就等於不會用 AWS &lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10208308848518247&#34;&gt;1&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這問題就像是城市發展，大樓蓋好了，但是主要公路沒規劃，從台北到桃園，只能先從松山機場坐飛機，飛到日本，然後再回到桃園機場降落。&lt;/p&gt;
&lt;p&gt;過一陣子才發現機票很貴，發現，應該在台北桃園蓋一條高速公路就可以。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;大部分的開發者，負責蓋大樓，但不負責蓋馬路。更不用提規劃馬路要知道 RFC 1918 這種基礎知識。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;蓋了大樓，要做道路規劃，主幹線、支線、單線、雙線、高速線道、人行道，規劃好再做好交通管制閘道，像：紅綠燈、斑馬線、限速。。。這是都市規劃。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我還沒提到簽證、身份驗證、ETC 這種跟 Auth 有關的東西。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你的架構如果無法看到問題，錢會不知道怎麼不見的，資安問題會莫名其妙地跑出來。&lt;/p&gt;
&lt;p&gt;不要覺得換一個雲就沒這問題，實際上問題都一樣，只是有沒有真的去面對而已。&lt;/p&gt;
&lt;p&gt;組織每多一個團隊，管理者就要解決這個團隊與其他團隊溝通的問題。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: Jsonnet</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0211/</link>
      <pubDate>Mon, 11 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0211/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210736739654008&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210736739654008&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#Jsonnet &lt;a href=&#34;https://jsonnet.org/&#34;&gt;0&lt;/a&gt; 是 json 的超集 (superset) 專案，是個資料結構樣板語言 (Data Templating Language)，增強了 json 的弱點，從 Feature 來看，算是個 DSL (Domain-specific Language)。&lt;/p&gt;
&lt;p&gt;底下是他的 Features &lt;a href=&#34;https://jsonnet.org/learning/tutorial.html&#34;&gt;1&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Syntax (語法): 支援 comment, 變數 (範圍), namespace&lt;/li&gt;
&lt;li&gt;Variables (變數): local,&lt;/li&gt;
&lt;li&gt;References (變數參考): self. , $refers, [&amp;lsquo;field&amp;rsquo;] &amp;hellip;&lt;/li&gt;
&lt;li&gt;Arithmetic (運算): 支援 floating, bitwise, boolean logic, ==,  &amp;hellip; 等常見運算&lt;/li&gt;
&lt;li&gt;Functions: 可以寫函式，有標準函式庫 &lt;a href=&#34;https://jsonnet.org/ref/stdlib.html&#34;&gt;2&lt;/a&gt; &amp;hellip;&lt;/li&gt;
&lt;li&gt;Conditionals (條件式判斷): if / else / then&lt;/li&gt;
&lt;li&gt;Computed Field Names: 物件可以當作資料結構處理&lt;/li&gt;
&lt;li&gt;Array and Object Comprehension: 支援類似 Python 的 list 走訪語法，直接展開 Array Element.&lt;/li&gt;
&lt;li&gt;Imports: 支援 import text, json, .libsonnet&lt;/li&gt;
&lt;li&gt;Errors: 支援 assert&lt;/li&gt;
&lt;li&gt;Parameterize Entire Config: 參數化整個配置，分 外部變數和最上層參數&lt;/li&gt;
&lt;li&gt;Object-Orientation (物件導向) &amp;hellip;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;jsonnet-這個字由-json--sonnet-組成唸作-jay-sonnet-由-google-一群宅宅於-2014-年發起&#34;&gt;jsonnet 這個字由 json + sonnet 組成，唸作 &amp;ldquo;jay sonnet&amp;rdquo;. 由 Google 一群宅宅於 2014 年發起。&lt;/h2&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 自我？自由意識存在？</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0206-draft/</link>
      <pubDate>Wed, 06 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0206-draft/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210706794385395&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210706794385395&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;色列作家 #尤瓦爾赫拉利 的著作：《#未來簡史（台灣書名：#人類大命運）》談到的 #自由主義 的三個假設前提：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我有一個不可分割的自我&lt;/li&gt;
&lt;li&gt;這個自我是自由的（即自由意識是存在的）&lt;/li&gt;
&lt;li&gt;沒有人比我更了解自我&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;這三個假設，在書裡提到已經都被推翻，換言之，未來將不存在自由主義，未來只會剩下三種人：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;無用的人（已經被機器取代的人）&lt;/li&gt;
&lt;li&gt;沒有自主的人（完全透過演算法決策的人）&lt;/li&gt;
&lt;li&gt;神人 （寫演算法的人）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;#自由意識&lt;/p&gt;
&lt;h2 id=&#34;美麗新世界&#34;&gt;美麗新世界&lt;/h2&gt;
&lt;p&gt;讀到這裡，想起反烏托邦小說《#美麗新世界》裡面透過生物科技，在胚胎時期，透過修改 DNA 把人類分成四種等級：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Alpha:&lt;/li&gt;
&lt;li&gt;Beta:&lt;/li&gt;
&lt;li&gt;Gamma:&lt;/li&gt;
&lt;li&gt;Delta:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;這四種等級，Alpha 移走了現代人普遍的道德觀，例如小說中不存在家庭、夫妻、父母的『歷史概念』，允許自由性交、允許吸毒，一切人性的慾望，都可以獲得滿足。&lt;/p&gt;
&lt;p&gt;當然要滿足這些慾望，也要先打破一些生理限制，例如『自由性交』，小說中的人的 DNA 是被修改過的，經過基因工程誕生的人，是沒有生殖、生育能力的。&lt;/p&gt;
&lt;p&gt;Delta 是最低等的人，在受精卵胚胎成形的時候，透過減少氧氣的方式，降低智商，提升體力，這些人成人後負責粗重的工作。但同時也會滿足他們各方面的慾望，例如成就感、慾望、甚至是毒品。&lt;/p&gt;
&lt;p&gt;赫拉利 另一本著名著作：人類大歷史 （或者人類簡史）&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;小時候看小叮噹&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;銀河飛龍&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;當不需要工作、不缺糧食、不需要，
那麼生活的目的是什麼？&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: 軟體測試？</title>
      <link>https://www.gtcafe.com/portal/itlds/2019/0119_test-concept/</link>
      <pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/0119_test-concept/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210605483812694&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210605483812694&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;說明一些關於 #軟體測試的 觀念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能 (Functional)、整合 (Integration)、回歸 (Regression) 、效能 (Performance) 是不同的目標、目的 (請注意次序性)&lt;/li&gt;
&lt;li&gt;測試這些事情所具備的條件、資源、環境是不一樣的&lt;/li&gt;
&lt;li&gt;定義參閱 [1]&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;舉例&#34;&gt;舉例&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;#功能：處理一張圖檔的縮圖處理 - 重點在於功能可否運作&lt;/li&gt;
&lt;li&gt;#整合：處理一張圖縮圖 + 浮水印 + 改檔名 - 幾個功能放在一起運作邏輯&lt;/li&gt;
&lt;li&gt;#回歸：1) 重新驗證曾經出現的 bug/detect, 2)重跑功能 + 整合所有的 test cases.&lt;/li&gt;
&lt;li&gt;#效能：處理一萬張縮圖處理 - 重點在於完成所需的資源、時間&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;優先序：功能 &amp;gt; 整合 &amp;gt; 回歸 &amp;gt; 效能&lt;/p&gt;
&lt;h1 id=&#34;觀察到的現象&#34;&gt;觀察到的現象&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;很多人會把 功能 跟 效能 擺在一起測試，混為一談，特別是在規劃測試環境時，這兩個不能混為一談，會沒完沒了。&lt;/li&gt;
&lt;li&gt;測試效能的前提是：功能能夠順利通過驗證。如果功能測試的可測性有問題，效能測試意義就不大。&lt;/li&gt;
&lt;li&gt;#整合測試 的排列組合無窮多，必須有使用者場景 (User Scenario) 支撐，參見 [3] 的案例分析&lt;/li&gt;
&lt;li&gt;測試 也是 #解偶，不是啥東西都要扯在一起才能測。想想 AWS 怎麼測 EC2、VPC、DynamoDB &amp;hellip;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;軟體測試的二分法&#34;&gt;軟體測試的二分法&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;功能驗證 (FVT)：#假設功能還沒好，目的是確認商業功能正確性，像是邏輯完整性、資料正確性、驗證與錯誤處理 … 等，強調功能本身的 #內聚力。&lt;/li&gt;
&lt;li&gt;系統驗證 (SVT)：#假設功能都好了，增加 外在環境因素 之後，把這些 功能 放到不同的環境會有什麼問題？強調外在 #耦合性、真實世界 的情境。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;相關文章&#34;&gt;相關文章&lt;/h1&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://rickhw.github.io/2017/03/18/SQA/Stages-In-Software-Testing/&#34;&gt;https://rickhw.github.io/2017/03/18/SQA/Stages-In-Software-Testing/&lt;/a&gt;
[2] &lt;a href=&#34;https://rickhw.github.io/2018/03/18/SQA/Gossip-System-Testing/&#34;&gt;https://rickhw.github.io/2018/03/18/SQA/Gossip-System-Testing/&lt;/a&gt;
[3] &lt;a href=&#34;https://rickhw.github.io/2017/12/03/SQA/Regression-Test-Is-Tough/&#34;&gt;https://rickhw.github.io/2017/12/03/SQA/Regression-Test-Is-Tough/&lt;/a&gt;
[4] &lt;a href=&#34;https://rickhw.github.io/2018/07/22/SQA/Performance-Test/&#34;&gt;https://rickhw.github.io/2018/07/22/SQA/Performance-Test/&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: </title>
      <link>https://www.gtcafe.com/portal/itlds/2019/blogged__0316-jinyoung2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/blogged__0316-jinyoung2/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210905994685278&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210905994685278&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#倚天屠龍記 2019 年版正在播放中，進行到劇情中最精彩的 #大事件： #六大派圍攻光明頂&lt;/p&gt;
&lt;p&gt;整理我看過的電視劇版本，與原著比較，後面的數字是電視劇 六大派圍攻光明頂 的 影集數和實際劇情的時間：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=80acNFe3WEY&amp;amp;index=26&amp;amp;list=PLUz3zvlwsLgXd5qxaFXSk6l_1zujIm0ia&#34;&gt;1&lt;/a&gt; 1994 馬景濤、葉童: 26-27, 15m&lt;/li&gt;
&lt;li&gt;[2] 2001 吳啟華、黎姿, 找不到了&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=qr89CgWprPo&amp;amp;list=PLi9UVZfmqM6HOVMJAY1q8kL10nRnl1Puc&amp;amp;index=15&#34;&gt;3&lt;/a&gt; 2003 蘇有朋、賈靜雯: 15 - 16 集, 30m&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=--D2LQENhw4&amp;amp;list=PLryjp4SwKTHWszxNjzLiQWhXF9MRZXCGX&amp;amp;index=18&#34;&gt;4&lt;/a&gt; 2009 鄧超、安以軒： 17 集, 20m&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Gvj5ZcoiMtw&#34;&gt;5&lt;/a&gt; 2019 曾舜晞、陳鈺琪, 20-21 集&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原著小說的時間序 [大概]&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;白眉鷹王被 武當三俠 車輪戰&lt;/li&gt;
&lt;li&gt;張無忌 vs 少林寺：圓音 龍爪手&lt;/li&gt;
&lt;li&gt;華山掌門 #鮮于通 與 蝴蝶谷醫仙 #胡青牛&lt;/li&gt;
&lt;li&gt;崆峒派 七傷拳&lt;/li&gt;
&lt;li&gt;反兩儀劍法&lt;/li&gt;
&lt;li&gt;華山 兩儀劍法&lt;/li&gt;
&lt;li&gt;峨眉 滅絕 vs 張無忌&lt;/li&gt;
&lt;li&gt;峨眉 周芷若 vs 張無忌&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;完整性來講， 2019 年版算是最完整詮釋的，整體的步調還不錯，不會太快，或者感覺想要省略什麼。張無忌出場前，也把白眉鷹王的絕望感、悲壯感、老當益壯的感覺表現出來，張無忌出場舉重若輕的擊敗對手、揭瘡疤 &amp;hellip; 等。&lt;/p&gt;
&lt;p&gt;電視劇的拍攝，往往有一個問題：想要討好觀眾，所以能省就省，很多原著中的劇情都省略了，或者隨便敷衍的拍過。有時候刻意用一推沒啥意義的特效，掩蓋劇情，或者很爛的佈景。&lt;/p&gt;
&lt;p&gt;2019 版，看到現在，整體來說，蠻對我的胃口的。幾個打到我的點的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;#音樂與配樂：主題曲是周華健的 #刀劍如夢 ，直接向 1994 年的版致敬，有歷史感，記憶感。配樂以西洋 #Epic 曲風居多，也就是管弦樂為主，中國傳統樂器較少，這點我覺得可以再觀察。&lt;/li&gt;
&lt;li&gt;#場景：針對光明頂的場景，場面夠大，有『總壇』的感覺，夠氣派，應該是歷來最棒的場景。&lt;/li&gt;
&lt;li&gt;#整體畫面：中國過去十年拍攝的古裝電視劇都有一個共同的問題：顏色太豔麗，沒有古氣。古代服裝也好，建築也好，實際上顏色不會太豔麗，所以如果呈現的太豔麗，反而很刻意，或者很現代，古裝戲很現代？&lt;/li&gt;
&lt;li&gt;#武打特效：同樣的問題，過去十年的電腦特效都太花俏，反而沒有傳統武術的內斂與樸實感，過多的是好萊屋的人工製品感。2019 年版的特效沒有太鋪張，武打動作算是中庸。&lt;/li&gt;
&lt;li&gt;#運鏡與剪接：有些武打動作，被鄉民或影評幹樵，一個動作用了七個鏡頭（張翠山自盡畫面），這點我認同，有點過頭。我個人也不太喜歡在觀影時，有太多的剪接，有時候視覺上滿累的。&lt;/li&gt;
&lt;li&gt;#演員選角與詮釋：這很主觀。好的是，女生的部分，是我的菜XDD，不管是造型還是裝扮，都算是我心裡覺得應該的。男性演員，有些角色的詮釋不太習慣，特別是楊逍，詮釋的太冷，比較像是黃藥師，沒有瀟灑自若、放到不羈的感覺。&lt;/li&gt;
&lt;li&gt;#段落起訖的張力：這段經典從白眉鷹王力戰六大派、一直到最後周芷若用倚天劍，刺傷張無忌，導致重傷、殷梨廷 與 楊不悔 之間的對話、張無忌與武當六俠相認，劇情張力與情感表現落差很大，實在是經典中的經典。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;恩，簡單記錄，觀看到現在的感覺，其他未來再來補充。&lt;/p&gt;
&lt;p&gt;#金庸&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Itlds: </title>
      <link>https://www.gtcafe.com/portal/itlds/2019/blogged__0330-end-of-q/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtcafe.com/portal/itlds/2019/blogged__0330-end-of-q/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.facebook.com/rick.kyhwang/posts/10210969925483508&#34;&gt;https://www.facebook.com/rick.kyhwang/posts/10210969925483508&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;莫名其妙，好像什麼都沒做， 2019Q1 就過完了，從年前、年後，一直到現在，送走了好多人，吃了很多飯局，也約了好幾場卻沒吃到，一延、二延、三延 &amp;hellip; 然後就忘了。這過程心裡的感覺很複雜，愁悵感由然而生，想很多事情，正向的、反向的、自私的、大格局的，都想過。但從不想改變什麼，因為也改變不了什麼。&lt;/p&gt;
&lt;p&gt;來來去去、分分合合，本來就是職場的常態。在這樣的狀態之下，該做的還是要做，該忙的還是要忙，要面對的還是要面對。&lt;/p&gt;
&lt;p&gt;最近有多忙，忙到不知道自己在做啥。每天都一兩點睡，有時候會到四點，上班坐公車坐到睡著、下班常常是公車坐過頭，上班鬧鐘響了，像是個機器人穿衣服、刷牙、等公車、到公司、吃三角飯糰、泡咖啡、開會、開會、開會、開會、開會、開會、下班、讀書、找資料、學習、思考 &amp;hellip;.。&lt;/p&gt;
&lt;p&gt;讀了很多書、看了很多文章，很多想法怕流失，隨時都在紀錄想法，隨時都在發想、隨時都在思考下一步，隨時都希望可以幫助團隊成長，不要走冤枉路，但也在思考自己的不足、該持續補足的。&lt;/p&gt;
&lt;p&gt;想的速度，遠遠大於寫下來的速度，有時候還真的希望可以用腦袋直接寫文章，把想法透過意念的方式記錄下來，甚至直接寫成程式。&lt;/p&gt;
&lt;p&gt;認識很多高手，知道自己的不足，深刻體悟一個人的苗小，團隊與合作的重要。進與退，永遠是退者才有機會。天下武功，仁者服人。想想唯一能做的，不是把自己變成技術很厲害的、或者是造神運動，反而最重要的是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;建立連結、創造舞台、製造機會、成就團隊&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;回顧去年年底日記寫的目標與期許，到現在好像沒有真的做了什麼。有很多想做的，特別是想改變一些現況的想法，想幫助別人的想法、意念沒改變。雖然能力很有限，但總是想做些什麼事。&lt;/p&gt;
&lt;p&gt;雨天的夜，就像 Deep Purple 的經典曲 &amp;ldquo;Sometimes I Feel Like Screaming&amp;rdquo; &amp;hellip;.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
